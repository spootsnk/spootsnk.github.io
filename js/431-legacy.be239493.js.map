{"version":3,"file":"js/431-legacy.be239493.js","mappings":"+GAEA,IAAIA,EAAS,EAAQ,OAerB,SAASC,EAAKC,GACV,IAAIC,EAAS,CAACC,IAAUA,KAAWA,KAAWA,KAe9C,OAdAJ,EAAOK,UAAUH,GAAS,SAAUI,GAC5BH,EAAO,GAAKG,EAAM,KAClBH,EAAO,GAAKG,EAAM,IAElBH,EAAO,GAAKG,EAAM,KAClBH,EAAO,GAAKG,EAAM,IAElBH,EAAO,GAAKG,EAAM,KAClBH,EAAO,GAAKG,EAAM,IAElBH,EAAO,GAAKG,EAAM,KAClBH,EAAO,GAAKG,EAAM,GAE1B,IACOH,CACX,CACAF,EAAK,WAAaA,EAClBM,EAAQ,EAAUN,C,wBClClB,IAAIO,EAAc,EAAQ,OA4B1B,SAASC,EAAsBC,EAAOC,EAASC,GAG3C,QAFgB,IAAZA,IAAsBA,EAAU,CAAC,IAEhCF,EACD,MAAM,IAAIG,MAAM,qBAEpB,IAAKF,EACD,MAAM,IAAIE,MAAM,uBAEpB,IAAIC,EAAKN,EAAYO,SAASL,GAC1BM,EAAOR,EAAYS,QAAQN,GAC3BO,EAAOF,EAAKE,KACZjB,EAAOU,EAAQV,KACfkB,EAAQH,EAAKI,YAEjB,GAAInB,IAA6B,IAArBoB,EAAOP,EAAIb,GACnB,OAAO,EAGE,YAATiB,IACAC,EAAQ,CAACA,IAGb,IADA,IAAIG,GAAa,EACRC,EAAI,EAAGA,EAAIJ,EAAMK,SAAWF,EAAYC,IAE7C,GAAIE,EAAOX,EAAIK,EAAMI,GAAG,GAAIX,EAAQc,gBAAiB,CACjD,IAAIC,GAAS,EACTC,EAAI,EAER,MAAOA,EAAIT,EAAMI,GAAGC,SAAWG,EACvBF,EAAOX,EAAIK,EAAMI,GAAGK,IAAKhB,EAAQc,kBACjCC,GAAS,GAEbC,IAECD,IACDL,GAAa,EAErB,CAEJ,OAAOA,CACX,CAWA,SAASG,EAAOX,EAAIe,EAAMH,GACtB,IAAII,GAAW,EACXD,EAAK,GAAG,KAAOA,EAAKA,EAAKL,OAAS,GAAG,IACrCK,EAAK,GAAG,KAAOA,EAAKA,EAAKL,OAAS,GAAG,KACrCK,EAAOA,EAAKE,MAAM,EAAGF,EAAKL,OAAS,IAEvC,IAAK,IAAID,EAAI,EAAGS,EAAIH,EAAKL,OAAS,EAAGD,EAAIM,EAAKL,OAAQQ,EAAIT,IAAK,CAC3D,IAAIU,EAAKJ,EAAKN,GAAG,GACbW,EAAKL,EAAKN,GAAG,GACbY,EAAKN,EAAKG,GAAG,GACbI,EAAKP,EAAKG,GAAG,GACbK,EAAavB,EAAG,IAAMmB,EAAKE,GAAMD,GAAMC,EAAKrB,EAAG,IAAMsB,GAAMtB,EAAG,GAAKmB,KAAQ,IAC1EA,EAAKnB,EAAG,KAAOqB,EAAKrB,EAAG,KAAO,IAC9BoB,EAAKpB,EAAG,KAAOsB,EAAKtB,EAAG,KAAO,EACnC,GAAIuB,EACA,OAAQX,EAEZ,IAAIY,EAAYJ,EAAKpB,EAAG,KAAOsB,EAAKtB,EAAG,IACnCA,EAAG,IAAOqB,EAAKF,IAAOnB,EAAG,GAAKoB,IAAQE,EAAKF,GAAMD,EACjDK,IACAR,GAAYA,EAEpB,CACA,OAAOA,CACX,CASA,SAAST,EAAOP,EAAIb,GAChB,OAAQA,EAAK,IAAMa,EAAG,IAAMb,EAAK,IAAMa,EAAG,IAAMb,EAAK,IAAMa,EAAG,IAAMb,EAAK,IAAMa,EAAG,EACtF,CA7CAP,EAAQ,EAAUE,C,sBC4BlB,SAAS8B,EAAQvB,EAAMwB,EAAY5B,QACf,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAI6B,EAAO,CAAEvB,KAAM,WASnB,OARmB,IAAfN,EAAQ8B,IAAY9B,EAAQ8B,MAC5BD,EAAKC,GAAK9B,EAAQ8B,IAElB9B,EAAQX,OACRwC,EAAKxC,KAAOW,EAAQX,MAExBwC,EAAKD,WAAaA,GAAc,CAAC,EACjCC,EAAKE,SAAW3B,EACTyB,CACX,CAiBA,SAASE,EAASzB,EAAME,EAAawB,GAEjC,YADiB,IAAbA,IAAuBA,EAAW,CAAC,GAC/B1B,GACJ,IAAK,QACD,OAAOR,EAAMU,GAAauB,SAC9B,IAAK,aACD,OAAOE,EAAWzB,GAAauB,SACnC,IAAK,UACD,OAAOhC,EAAQS,GAAauB,SAChC,IAAK,aACD,OAAOG,EAAW1B,GAAauB,SACnC,IAAK,kBACD,OAAOI,EAAgB3B,GAAauB,SACxC,IAAK,eACD,OAAOK,EAAa5B,GAAauB,SACrC,QACI,MAAM,IAAI9B,MAAMK,EAAO,eAEnC,CAiBA,SAASR,EAAMU,EAAaoB,EAAY5B,GAEpC,QADgB,IAAZA,IAAsBA,EAAU,CAAC,IAChCQ,EACD,MAAM,IAAIP,MAAM,2BAEpB,IAAKoC,MAAMC,QAAQ9B,GACf,MAAM,IAAIP,MAAM,gCAEpB,GAAIO,EAAYI,OAAS,EACrB,MAAM,IAAIX,MAAM,+CAEpB,IAAKsC,EAAS/B,EAAY,MAAQ+B,EAAS/B,EAAY,IACnD,MAAM,IAAIP,MAAM,oCAEpB,IAAIG,EAAO,CACPE,KAAM,QACNE,YAAaA,GAEjB,OAAOmB,EAAQvB,EAAMwB,EAAY5B,EACrC,CAsBA,SAASwC,EAAOhC,EAAaoB,EAAY5B,GAErC,YADgB,IAAZA,IAAsBA,EAAU,CAAC,GAC9ByC,EAAkBjC,EAAYkC,KAAI,SAAUC,GAC/C,OAAO7C,EAAM6C,EAAQf,EACzB,IAAI5B,EACR,CAiBA,SAASD,EAAQS,EAAaoB,EAAY5B,QACtB,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAK,IAAI4C,EAAK,EAAGC,EAAgBrC,EAAaoC,EAAKC,EAAcjC,OAAQgC,IAAM,CAC3E,IAAI3B,EAAO4B,EAAcD,GACzB,GAAI3B,EAAKL,OAAS,EACd,MAAM,IAAIX,MAAM,+DAEpB,IAAK,IAAImB,EAAI,EAAGA,EAAIH,EAAKA,EAAKL,OAAS,GAAGA,OAAQQ,IAE9C,GAAIH,EAAKA,EAAKL,OAAS,GAAGQ,KAAOH,EAAK,GAAGG,GACrC,MAAM,IAAInB,MAAM,8CAG5B,CACA,IAAIG,EAAO,CACPE,KAAM,UACNE,YAAaA,GAEjB,OAAOmB,EAAQvB,EAAMwB,EAAY5B,EACrC,CAoBA,SAAS8C,EAAStC,EAAaoB,EAAY5B,GAEvC,YADgB,IAAZA,IAAsBA,EAAU,CAAC,GAC9ByC,EAAkBjC,EAAYkC,KAAI,SAAUC,GAC/C,OAAO5C,EAAQ4C,EAAQf,EAC3B,IAAI5B,EACR,CAmBA,SAASiC,EAAWzB,EAAaoB,EAAY5B,GAEzC,QADgB,IAAZA,IAAsBA,EAAU,CAAC,GACjCQ,EAAYI,OAAS,EACrB,MAAM,IAAIX,MAAM,yDAEpB,IAAIG,EAAO,CACPE,KAAM,aACNE,YAAaA,GAEjB,OAAOmB,EAAQvB,EAAMwB,EAAY5B,EACrC,CAqBA,SAAS+C,EAAYvC,EAAaoB,EAAY5B,GAE1C,YADgB,IAAZA,IAAsBA,EAAU,CAAC,GAC9ByC,EAAkBjC,EAAYkC,KAAI,SAAUC,GAC/C,OAAOV,EAAWU,EAAQf,EAC9B,IAAI5B,EACR,CAwBA,SAASyC,EAAkBO,EAAUhD,QACjB,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAIiD,EAAK,CAAE3C,KAAM,qBAQjB,OAPIN,EAAQ8B,KACRmB,EAAGnB,GAAK9B,EAAQ8B,IAEhB9B,EAAQX,OACR4D,EAAG5D,KAAOW,EAAQX,MAEtB4D,EAAGD,SAAWA,EACPC,CACX,CAmBA,SAASd,EAAgB3B,EAAaoB,EAAY5B,QAC9B,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAII,EAAO,CACPE,KAAM,kBACNE,YAAaA,GAEjB,OAAOmB,EAAQvB,EAAMwB,EAAY5B,EACrC,CAmBA,SAASkC,EAAW1B,EAAaoB,EAAY5B,QACzB,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAII,EAAO,CACPE,KAAM,aACNE,YAAaA,GAEjB,OAAOmB,EAAQvB,EAAMwB,EAAY5B,EACrC,CAoBA,SAASoC,EAAa5B,EAAaoB,EAAY5B,QAC3B,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAII,EAAO,CACPE,KAAM,eACNE,YAAaA,GAEjB,OAAOmB,EAAQvB,EAAMwB,EAAY5B,EACrC,CAoBA,SAASkD,EAAmBC,EAAYvB,EAAY5B,QAChC,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAII,EAAO,CACPE,KAAM,qBACN6C,WAAYA,GAEhB,OAAOxB,EAAQvB,EAAMwB,EAAY5B,EACrC,CAeA,SAASoD,EAAMC,EAAKC,GAEhB,QADkB,IAAdA,IAAwBA,EAAY,GACpCA,KAAeA,GAAa,GAC5B,MAAM,IAAIrD,MAAM,uCAEpB,IAAIsD,EAAaC,KAAKC,IAAI,GAAIH,GAAa,GAC3C,OAAOE,KAAKJ,MAAMC,EAAME,GAAcA,CAC1C,CAYA,SAASG,EAAgBC,EAASC,QAChB,IAAVA,IAAoBA,EAAQ,cAChC,IAAIC,EAASlE,EAAQmE,QAAQF,GAC7B,IAAKC,EACD,MAAM,IAAI5D,MAAM2D,EAAQ,qBAE5B,OAAOD,EAAUE,CACrB,CAYA,SAASE,EAAgBC,EAAUJ,QACjB,IAAVA,IAAoBA,EAAQ,cAChC,IAAIC,EAASlE,EAAQmE,QAAQF,GAC7B,IAAKC,EACD,MAAM,IAAI5D,MAAM2D,EAAQ,qBAE5B,OAAOI,EAAWH,CACtB,CAYA,SAASI,EAAgBD,EAAUJ,GAC/B,OAAOM,EAAiBH,EAAgBC,EAAUJ,GACtD,CAUA,SAASO,EAAiBC,GACtB,IAAIC,EAAQD,EAAU,IAItB,OAHIC,EAAQ,IACRA,GAAS,KAENA,CACX,CASA,SAASH,EAAiBP,GACtB,IAAIW,EAAUX,GAAW,EAAIH,KAAKe,IAClC,OAAkB,IAAVD,EAAiBd,KAAKe,EAClC,CASA,SAASC,EAAiBF,GACtB,IAAIX,EAAUW,EAAU,IACxB,OAAQX,EAAUH,KAAKe,GAAM,GACjC,CAWA,SAASE,EAAc7D,EAAQ8D,EAAcC,GAGzC,QAFqB,IAAjBD,IAA2BA,EAAe,mBAC5B,IAAdC,IAAwBA,EAAY,gBAClC/D,GAAU,GACZ,MAAM,IAAIX,MAAM,oCAEpB,OAAOyD,EAAgBK,EAAgBnD,EAAQ8D,GAAeC,EAClE,CAUA,SAASC,EAAYC,EAAMH,EAAcC,GAGrC,QAFqB,IAAjBD,IAA2BA,EAAe,eAC5B,IAAdC,IAAwBA,EAAY,gBAClCE,GAAQ,GACV,MAAM,IAAI5E,MAAM,kCAEpB,IAAI6E,EAAcnF,EAAQoF,YAAYL,GACtC,IAAKI,EACD,MAAM,IAAI7E,MAAM,0BAEpB,IAAI+E,EAAcrF,EAAQoF,YAAYJ,GACtC,IAAKK,EACD,MAAM,IAAI/E,MAAM,uBAEpB,OAAQ4E,EAAOC,EAAeE,CAClC,CAaA,SAASzC,EAASc,GACd,OAAQ4B,MAAM5B,IAAgB,OAARA,IAAiBhB,MAAMC,QAAQe,EACzD,CAaA,SAAS6B,EAASC,GACd,QAASA,GAASA,EAAMC,cAAgBC,MAC5C,CAuBA,SAASC,EAAajG,GAClB,IAAKA,EACD,MAAM,IAAIY,MAAM,oBAEpB,IAAKoC,MAAMC,QAAQjD,GACf,MAAM,IAAIY,MAAM,yBAEpB,GAAoB,IAAhBZ,EAAKuB,QAAgC,IAAhBvB,EAAKuB,OAC1B,MAAM,IAAIX,MAAM,2CAEpBZ,EAAKkG,SAAQ,SAAUlC,GACnB,IAAKd,EAASc,GACV,MAAM,IAAIpD,MAAM,iCAExB,GACJ,CAuBA,SAASuF,EAAW1D,GAChB,IAAKA,EACD,MAAM,IAAI7B,MAAM,kBAEpB,IAAiD,IAA7C,CAAC,SAAU,UAAUwF,eAAe3D,GACpC,MAAM,IAAI7B,MAAM,kCAExB,CAjtBAoF,OAAOK,eAAe/F,EAAS,aAAc,CAAEgG,OAAO,IAUtDhG,EAAQiG,YAAc,UAOtBjG,EAAQmE,QAAU,CACd+B,YAAmC,IAAtBlG,EAAQiG,YACrBE,YAAmC,IAAtBnG,EAAQiG,YACrBtB,QAAS3E,EAAQiG,YAAc,OAC/BG,KAA4B,QAAtBpG,EAAQiG,YACdI,OAA8B,MAAtBrG,EAAQiG,YAChBK,WAAYtG,EAAQiG,YAAc,IAClCM,WAAYvG,EAAQiG,YAAc,IAClCO,OAAQxG,EAAQiG,YAChBQ,OAAQzG,EAAQiG,YAChBS,MAAO1G,EAAQiG,YAAc,SAC7BU,YAAmC,IAAtB3G,EAAQiG,YACrBW,YAAmC,IAAtB5G,EAAQiG,YACrBY,cAAe7G,EAAQiG,YAAc,KACrCjC,QAAS,EACT8C,MAA6B,OAAtB9G,EAAQiG,aAQnBjG,EAAQ+G,aAAe,CACnBb,YAAa,IACbC,YAAa,IACbxB,QAAS,EAAI,OACbyB,KAAM,QACNC,OAAQ,MACRC,WAAY,KACZC,WAAY,KACZC,OAAQ,EACRC,OAAQ,EACRC,MAAO,EAAI,SACXC,YAAa,IACbC,YAAa,IACbC,cAAe,EAAI,KACnB7C,QAAS,EAAIhE,EAAQiG,YACrBa,MAAO,WAQX9G,EAAQoF,YAAc,CAClB4B,MAAO,UACPd,YAAa,IACbC,YAAa,IACbC,KAAM,aACNa,SAAU,KACVZ,OAAQ,eACRC,WAAY,KACZC,WAAY,KACZC,OAAQ,EACRC,OAAQ,EACRC,MAAO,OACPC,YAAa,IACbC,YAAa,IACbE,MAAO,aAmCX9G,EAAQgC,QAAUA,EAmClBhC,EAAQoC,SAAWA,EAoCnBpC,EAAQG,MAAQA,EA2BhBH,EAAQ6C,OAASA,EAoCjB7C,EAAQI,QAAUA,EAyBlBJ,EAAQmD,SAAWA,EA6BnBnD,EAAQsC,WAAaA,EA0BrBtC,EAAQoD,YAAcA,EAmCtBpD,EAAQ8C,kBAAoBA,EA0B5B9C,EAAQwC,gBAAkBA,EA0B1BxC,EAAQuC,WAAaA,EA2BrBvC,EAAQyC,aAAeA,EA2BvBzC,EAAQuD,mBAAqBA,EAsB7BvD,EAAQyD,MAAQA,EAmBhBzD,EAAQ+D,gBAAkBA,EAmB1B/D,EAAQoE,gBAAkBA,EAc1BpE,EAAQsE,gBAAkBA,EAgB1BtE,EAAQwE,iBAAmBA,EAY3BxE,EAAQuE,iBAAmBA,EAY3BvE,EAAQ6E,iBAAmBA,EAkB3B7E,EAAQ8E,cAAgBA,EAyBxB9E,EAAQiF,YAAcA,EAetBjF,EAAQ4C,SAAWA,EAenB5C,EAAQuF,SAAWA,EAsCnBvF,EAAQ2F,aAAeA,EA8BvB3F,EAAQ6F,WAAaA,C,wBCltBrBH,OAAOK,eAAe/F,EAAS,aAAc,CAAEgG,OAAO,IACtD,IAAIkB,EAAY,EAAQ,OAaxB,SAAS1G,EAAST,GACd,IAAKA,EACD,MAAM,IAAIO,MAAM,qBAEpB,IAAKoC,MAAMC,QAAQ5C,GAAQ,CACvB,GAAmB,YAAfA,EAAMY,MACa,OAAnBZ,EAAMqC,UACkB,UAAxBrC,EAAMqC,SAASzB,KACf,OAAOZ,EAAMqC,SAASvB,YAE1B,GAAmB,UAAfd,EAAMY,KACN,OAAOZ,EAAMc,WAErB,CACA,GAAI6B,MAAMC,QAAQ5C,IACdA,EAAMkB,QAAU,IACfyB,MAAMC,QAAQ5C,EAAM,MACpB2C,MAAMC,QAAQ5C,EAAM,IACrB,OAAOA,EAEX,MAAM,IAAIO,MAAM,qDACpB,CAcA,SAAS6G,EAAUnE,GACf,GAAIN,MAAMC,QAAQK,GACd,OAAOA,EAGX,GAAoB,YAAhBA,EAAOrC,MACP,GAAwB,OAApBqC,EAAOZ,SACP,OAAOY,EAAOZ,SAASvB,iBAK3B,GAAImC,EAAOnC,YACP,OAAOmC,EAAOnC,YAGtB,MAAM,IAAIP,MAAM,8DACpB,CASA,SAAS8G,EAAevG,GACpB,GAAIA,EAAYI,OAAS,GACrBiG,EAAUtE,SAAS/B,EAAY,KAC/BqG,EAAUtE,SAAS/B,EAAY,IAC/B,OAAO,EAEX,GAAI6B,MAAMC,QAAQ9B,EAAY,KAAOA,EAAY,GAAGI,OAChD,OAAOmG,EAAevG,EAAY,IAEtC,MAAM,IAAIP,MAAM,wCACpB,CAWA,SAAS+G,EAAYrB,EAAOrF,EAAM2G,GAC9B,IAAK3G,IAAS2G,EACV,MAAM,IAAIhH,MAAM,0BAEpB,IAAK0F,GAASA,EAAMrF,OAASA,EACzB,MAAM,IAAIL,MAAM,oBACZgH,EACA,eACA3G,EACA,WACAqF,EAAMrF,KAElB,CAYA,SAAS4G,EAAUvF,EAASrB,EAAM2G,GAC9B,IAAKtF,EACD,MAAM,IAAI1B,MAAM,qBAEpB,IAAKgH,EACD,MAAM,IAAIhH,MAAM,gCAEpB,IAAK0B,GAA4B,YAAjBA,EAAQrB,OAAuBqB,EAAQI,SACnD,MAAM,IAAI9B,MAAM,oBAAsBgH,EAAO,oCAEjD,IAAKtF,EAAQI,UAAYJ,EAAQI,SAASzB,OAASA,EAC/C,MAAM,IAAIL,MAAM,oBACZgH,EACA,eACA3G,EACA,WACAqB,EAAQI,SAASzB,KAE7B,CAYA,SAAS6G,EAAa1E,EAAmBnC,EAAM2G,GAC3C,IAAKxE,EACD,MAAM,IAAIxC,MAAM,+BAEpB,IAAKgH,EACD,MAAM,IAAIhH,MAAM,mCAEpB,IAAKwC,GAAgD,sBAA3BA,EAAkBnC,KACxC,MAAM,IAAIL,MAAM,oBAAsBgH,EAAO,gCAEjD,IAAK,IAAIrE,EAAK,EAAGwE,EAAK3E,EAAkBO,SAAUJ,EAAKwE,EAAGxG,OAAQgC,IAAM,CACpE,IAAIjB,EAAUyF,EAAGxE,GACjB,IAAKjB,GAA4B,YAAjBA,EAAQrB,OAAuBqB,EAAQI,SACnD,MAAM,IAAI9B,MAAM,oBAAsBgH,EAAO,oCAEjD,IAAKtF,EAAQI,UAAYJ,EAAQI,SAASzB,OAASA,EAC/C,MAAM,IAAIL,MAAM,oBACZgH,EACA,eACA3G,EACA,WACAqB,EAAQI,SAASzB,KAE7B,CACJ,CAoBA,SAASD,EAAQf,GACb,MAAqB,YAAjBA,EAAQgB,KACDhB,EAAQyC,SAEZzC,CACX,CAoBA,SAAS+H,EAAQ/H,EAASgI,GACtB,MAAqB,sBAAjBhI,EAAQgB,KACD,oBAEU,uBAAjBhB,EAAQgB,KACD,qBAEU,YAAjBhB,EAAQgB,MAA2C,OAArBhB,EAAQyC,SAC/BzC,EAAQyC,SAASzB,KAErBhB,EAAQgB,IACnB,CAlMAX,EAAQQ,SAAWA,EA+BnBR,EAAQmH,UAAYA,EAmBpBnH,EAAQoH,eAAiBA,EAuBzBpH,EAAQqH,YAAcA,EA8BtBrH,EAAQuH,UAAYA,EAoCpBvH,EAAQwH,aAAeA,EAyBvBxH,EAAQU,QAAUA,EA+BlBV,EAAQ0H,QAAUA,C,wBCtOlBhC,OAAOK,eAAe/F,EAAS,aAA/B,CAA+CgG,OAAO,IAEtD,IAAI4B,EAAU,EAAQ,OAmCtB,SAAS9H,EAAUH,EAASkI,EAAUC,GAEpC,GAAgB,OAAZnI,EA4BJ,IA3BA,IAAI8B,EACFJ,EACA0G,EACA3F,EACA4F,EACAhF,EACAiF,EAGAC,EAFAC,EAAa,EACbC,EAAa,EAEbzH,EAAOhB,EAAQgB,KACf0H,EAA+B,sBAAT1H,EACtB2H,EAAqB,YAAT3H,EACZ4H,EAAOF,EAAsB1I,EAAQ0D,SAASpC,OAAS,EAchDuH,EAAe,EAAGA,EAAeD,EAAMC,IAAgB,CAC9DP,EAA0BI,EACtB1I,EAAQ0D,SAASmF,GAAcpG,SAC/BkG,EACA3I,EAAQyC,SACRzC,EACJuI,IAAuBD,GACc,uBAAjCA,EAAwBtH,KAE5BqH,EAAQE,EACJD,EAAwBzE,WAAWvC,OACnC,EAEJ,IAAK,IAAIwH,EAAY,EAAGA,EAAYT,EAAOS,IAAa,CACtD,IAAIC,EAAoB,EACpBC,EAAgB,EAMpB,GALAvG,EAAW8F,EACPD,EAAwBzE,WAAWiF,GACnCR,EAGa,OAAb7F,EAAJ,CACAY,EAASZ,EAASvB,YAClB,IAAI+H,EAAWxG,EAASzB,KAQxB,OANAwH,GACEL,GACc,YAAbc,GAAuC,iBAAbA,EAEvB,EADA,EAGEA,GACN,KAAK,KACH,MACF,IAAK,QACH,IAOQ,IANNf,EACE7E,EACAoF,EACAI,EACAE,EACAC,GAGF,OAAO,EACTP,IACAM,IACA,MACF,IAAK,aACL,IAAK,aACH,IAAKjH,EAAI,EAAGA,EAAIuB,EAAO/B,OAAQQ,IAAK,CAClC,IAOQ,IANNoG,EACE7E,EAAOvB,GACP2G,EACAI,EACAE,EACAC,GAGF,OAAO,EACTP,IACiB,eAAbQ,GAA2BF,GACjC,CACiB,eAAbE,GAA2BF,IAC/B,MACF,IAAK,UACL,IAAK,kBACH,IAAKjH,EAAI,EAAGA,EAAIuB,EAAO/B,OAAQQ,IAAK,CAClC,IAAKJ,EAAI,EAAGA,EAAI2B,EAAOvB,GAAGR,OAASkH,EAAY9G,IAAK,CAClD,IAOQ,IANNwG,EACE7E,EAAOvB,GAAGJ,GACV+G,EACAI,EACAE,EACAC,GAGF,OAAO,EACTP,GACF,CACiB,oBAAbQ,GAAgCF,IACnB,YAAbE,GAAwBD,GAC9B,CACiB,YAAbC,GAAwBF,IAC5B,MACF,IAAK,eACH,IAAKjH,EAAI,EAAGA,EAAIuB,EAAO/B,OAAQQ,IAAK,CAElC,IADAkH,EAAgB,EACXtH,EAAI,EAAGA,EAAI2B,EAAOvB,GAAGR,OAAQI,IAAK,CACrC,IAAK0G,EAAI,EAAGA,EAAI/E,EAAOvB,GAAGJ,GAAGJ,OAASkH,EAAYJ,IAAK,CACrD,IAOQ,IANNF,EACE7E,EAAOvB,GAAGJ,GAAG0G,GACbK,EACAI,EACAE,EACAC,GAGF,OAAO,EACTP,GACF,CACAO,GACF,CACAD,GACF,CACA,MACF,IAAK,qBACH,IAAKjH,EAAI,EAAGA,EAAIW,EAASoB,WAAWvC,OAAQQ,IAC1C,IAEE,IADA3B,EAAUsC,EAASoB,WAAW/B,GAAIoG,EAAUC,GAG5C,OAAO,EACX,MACF,QACE,MAAM,IAAIxH,MAAM,yBAjGW,CAmGjC,CACF,CACF,CAoDA,SAASuI,EAAYlJ,EAASkI,EAAUiB,EAAchB,GACpD,IAAIiB,EAAgBD,EAwBpB,OAvBAhJ,EACEH,GACA,SACEqJ,EACAZ,EACAI,EACAE,EACAC,GAGEI,EADiB,IAAfX,QAAqCa,IAAjBH,EACNE,EAEAnB,EACdkB,EACAC,EACAZ,EACAI,EACAE,EACAC,EAEN,GACAb,GAEKiB,CACT,CA4BA,SAASG,EAASvJ,EAASkI,GACzB,IAAI7G,EACJ,OAAQrB,EAAQgB,MACd,IAAK,oBACH,IAAKK,EAAI,EAAGA,EAAIrB,EAAQ0D,SAASpC,OAAQD,IACvC,IAAoD,IAAhD6G,EAASlI,EAAQ0D,SAASrC,GAAGiB,WAAYjB,GAAc,MAE7D,MACF,IAAK,UACH6G,EAASlI,EAAQsC,WAAY,GAC7B,MAEN,CA8CA,SAASkH,EAAWxJ,EAASkI,EAAUiB,GACrC,IAAIC,EAAgBD,EAOpB,OANAI,EAASvJ,GAAS,SAAUyJ,EAAmBZ,GAE3CO,EADmB,IAAjBP,QAAuCS,IAAjBH,EACRM,EAEAvB,EAASkB,EAAeK,EAAmBZ,EAC/D,IACOO,CACT,CA6BA,SAASM,EAAY1J,EAASkI,GAC5B,GAAqB,YAAjBlI,EAAQgB,KACVkH,EAASlI,EAAS,QACb,GAAqB,sBAAjBA,EAAQgB,KACjB,IAAK,IAAIK,EAAI,EAAGA,EAAIrB,EAAQ0D,SAASpC,OAAQD,IAC3C,IAAyC,IAArC6G,EAASlI,EAAQ0D,SAASrC,GAAIA,GAAc,KAGtD,CA4CA,SAASsI,EAAc3J,EAASkI,EAAUiB,GACxC,IAAIC,EAAgBD,EAMpB,OALAO,EAAY1J,GAAS,SAAU4J,EAAgBf,GAE3CO,EADmB,IAAjBP,QAAuCS,IAAjBH,EACRS,EACG1B,EAASkB,EAAeQ,EAAgBf,EAC/D,IACOO,CACT,CAiBA,SAASS,EAAS7J,GAChB,IAAIqD,EAAS,GAIb,OAHAlD,EAAUH,GAAS,SAAUI,GAC3BiD,EAAOyG,KAAK1J,EACd,IACOiD,CACT,CAkCA,SAAS0G,EAAS/J,EAASkI,GACzB,IAAI7G,EACFS,EACAkI,EACAvH,EACA4F,EACAC,EACAC,EACA0B,EACAC,EACAC,EACAtB,EAAe,EACfH,EAAuC,sBAAjB1I,EAAQgB,KAC9B2H,EAA6B,YAAjB3I,EAAQgB,KACpB4H,EAAOF,EAAsB1I,EAAQ0D,SAASpC,OAAS,EAczD,IAAKD,EAAI,EAAGA,EAAIuH,EAAMvH,IAAK,CA4BzB,IA3BAiH,EAA0BI,EACtB1I,EAAQ0D,SAASrC,GAAGoB,SACpBkG,EACA3I,EAAQyC,SACRzC,EACJiK,EAAoBvB,EAChB1I,EAAQ0D,SAASrC,GAAGiB,WACpBqG,EACA3I,EAAQsC,WACR,CAAC,EACL4H,EAAcxB,EACV1I,EAAQ0D,SAASrC,GAAGtB,KACpB4I,EACA3I,EAAQD,UACRuJ,EACJa,EAAYzB,EACR1I,EAAQ0D,SAASrC,GAAGmB,GACpBmG,EACA3I,EAAQwC,QACR8G,EACJf,IAAuBD,GACc,uBAAjCA,EAAwBtH,KAE5BqH,EAAQE,EACJD,EAAwBzE,WAAWvC,OACnC,EAEC0I,EAAI,EAAGA,EAAI3B,EAAO2B,IAMrB,GALAvH,EAAW8F,EACPD,EAAwBzE,WAAWmG,GACnC1B,EAGa,OAAb7F,EAaJ,OAAQA,EAASzB,MACf,IAAK,QACL,IAAK,aACL,IAAK,aACL,IAAK,UACL,IAAK,kBACL,IAAK,eACH,IAOQ,IANNkH,EACEzF,EACAoG,EACAoB,EACAC,EACAC,GAGF,OAAO,EACT,MAEF,IAAK,qBACH,IAAKrI,EAAI,EAAGA,EAAIW,EAASoB,WAAWvC,OAAQQ,IAC1C,IAOQ,IANNoG,EACEzF,EAASoB,WAAW/B,GACpB+G,EACAoB,EACAC,EACAC,GAGF,OAAO,EAEX,MAEF,QACE,MAAM,IAAIxJ,MAAM,8BA/ClB,IAOQ,IANNuH,EACE,KACAW,EACAoB,EACAC,EACAC,GAGF,OAAO,EA0CbtB,GACF,CACF,CAkDA,SAASuB,EAAWpK,EAASkI,EAAUiB,GACrC,IAAIC,EAAgBD,EAuBpB,OAtBAY,EACE/J,GACA,SACEqK,EACAxB,EACAoB,EACAC,EACAC,GAGEf,EADmB,IAAjBP,QAAuCS,IAAjBH,EACRkB,EAEAnC,EACdkB,EACAiB,EACAxB,EACAoB,EACAC,EACAC,EAEN,IAEKf,CACT,CA8BA,SAASkB,EAAYtK,EAASkI,GAC5B6B,EAAS/J,GAAS,SAAUyC,EAAUoG,EAAcvG,EAAYvC,EAAMyC,GAEpE,IAiBIyG,EAjBAjI,EAAoB,OAAbyB,EAAoB,KAAOA,EAASzB,KAC/C,OAAQA,GACN,KAAK,KACL,IAAK,QACL,IAAK,aACL,IAAK,UACH,OAKQ,IAJNkH,EACED,EAAQ5F,QAAQI,EAAUH,EAAY,CAAEvC,KAAMA,EAAMyC,GAAIA,IACxDqG,EACA,SAIJ,EAMJ,OAAQ7H,GACN,IAAK,aACHiI,EAAW,QACX,MACF,IAAK,kBACHA,EAAW,aACX,MACF,IAAK,eACHA,EAAW,UACX,MAGJ,IACE,IAAIF,EAAoB,EACxBA,EAAoBtG,EAASvB,YAAYI,OACzCyH,IACA,CACA,IAAIwB,EAAa9H,EAASvB,YAAY6H,GAClCjI,EAAO,CACTE,KAAMiI,EACN/H,YAAaqJ,GAEf,IAEE,IADArC,EAASD,EAAQ5F,QAAQvB,EAAMwB,GAAauG,EAAcE,GAG1D,OAAO,CACX,CACF,GACF,CA8CA,SAASyB,EAAcxK,EAASkI,EAAUiB,GACxC,IAAIC,EAAgBD,EAmBpB,OAlBAmB,EACEtK,GACA,SAAU4J,EAAgBf,EAAcE,GAMpCK,EAJiB,IAAjBP,GACsB,IAAtBE,QACiBO,IAAjBH,EAEgBS,EAEA1B,EACdkB,EACAQ,EACAf,EACAE,EAEN,IAEKK,CACT,CAuCA,SAASqB,EAAYzK,EAASkI,GAC5BoC,EAAYtK,GAAS,SAAUqC,EAASwG,EAAcE,GACpD,IAAI2B,EAAe,EAGnB,GAAKrI,EAAQI,SAAb,CAEA,IAAIzB,EAAOqB,EAAQI,SAASzB,KAC5B,GAAa,UAATA,GAA6B,eAATA,EAAxB,CAGA,IAAI2J,EACAC,EAAuB,EACvBC,EAAqB,EACrBC,EAAgB,EACpB,OAyCQ,IAxCN3K,EACEkC,GACA,SACEgH,EACAZ,EACAsC,EACAC,EACAhC,GAGA,QACqBM,IAAnBqB,GACA9B,EAAe+B,GACfI,EAAsBH,GACtB7B,EAAgB8B,EAOhB,OALAH,EAAiBtB,EACjBuB,EAAuB/B,EACvBgC,EAAqBG,EACrBF,EAAgB9B,OAChB0B,EAAe,GAGjB,IAAIO,EAAiBhD,EAAQtF,WAC3B,CAACgI,EAAgBtB,GACjBhH,EAAQC,YAEV,IAOQ,IANN4F,EACE+C,EACApC,EACAE,EACAC,EACA0B,GAGF,OAAO,EACTA,IACAC,EAAiBtB,CACnB,UAxCJ,CAPqD,CAHxB,CAsD/B,GACF,CAuDA,SAAS6B,EAAclL,EAASkI,EAAUiB,GACxC,IAAIC,EAAgBD,EAChBgC,GAAU,EAwBd,OAvBAV,EACEzK,GACA,SACEiL,EACApC,EACAE,EACAC,EACA0B,GAGEtB,GADc,IAAZ+B,QAAsC7B,IAAjBH,EACP8B,EAEA/C,EACdkB,EACA6B,EACApC,EACAE,EACAC,EACA0B,GAEJS,GAAU,CACZ,IAEK/B,CACT,CAgCA,SAASgC,EAASpL,EAASkI,GAEzB,IAAKlI,EAAS,MAAM,IAAIW,MAAM,uBAE9B2J,EAAYtK,GAAS,SAAUqC,EAASwG,EAAcE,GACpD,GAAyB,OAArB1G,EAAQI,SAAZ,CACA,IAAIzB,EAAOqB,EAAQI,SAASzB,KACxBqC,EAAShB,EAAQI,SAASvB,YAC9B,OAAQF,GACN,IAAK,aACH,IAAiE,IAA7DkH,EAAS7F,EAASwG,EAAcE,EAAmB,EAAG,GACxD,OAAO,EACT,MACF,IAAK,UACH,IACE,IAAIC,EAAgB,EACpBA,EAAgB3F,EAAO/B,OACvB0H,IAEA,IAMQ,IALNd,EACED,EAAQtF,WAAWU,EAAO2F,GAAgB3G,EAAQC,YAClDuG,EACAE,EACAC,GAGF,OAAO,EAEX,MAxBiC,CA0BvC,GACF,CAgDA,SAASqC,EAAWrL,EAASkI,EAAUiB,GACrC,IAAIC,EAAgBD,EAgBpB,OAfAiC,EACEpL,GACA,SAAUsL,EAAazC,EAAcE,EAAmBC,GAEpDI,EADmB,IAAjBP,QAAuCS,IAAjBH,EACRmC,EAEApD,EACdkB,EACAkC,EACAzC,EACAE,EACAC,EAEN,IAEKI,CACT,CAoCA,SAASmC,EAAYvL,EAASU,GAG5B,GADAA,EAAUA,GAAW,CAAC,GACjBuH,EAAQrC,SAASlF,GAAU,MAAM,IAAIC,MAAM,sBAChD,IAOI8B,EAPAoG,EAAenI,EAAQmI,cAAgB,EACvCE,EAAoBrI,EAAQqI,mBAAqB,EACjDC,EAAgBtI,EAAQsI,eAAiB,EACzC0B,EAAehK,EAAQgK,cAAgB,EAGvCpI,EAAa5B,EAAQ4B,WAGzB,OAAQtC,EAAQgB,MACd,IAAK,oBACC6H,EAAe,IACjBA,EAAe7I,EAAQ0D,SAASpC,OAASuH,GAC3CvG,EAAaA,GAActC,EAAQ0D,SAASmF,GAAcvG,WAC1DG,EAAWzC,EAAQ0D,SAASmF,GAAcpG,SAC1C,MACF,IAAK,UACHH,EAAaA,GAActC,EAAQsC,WACnCG,EAAWzC,EAAQyC,SACnB,MACF,IAAK,QACL,IAAK,aACH,OAAO,KACT,IAAK,aACL,IAAK,UACL,IAAK,kBACL,IAAK,eACHA,EAAWzC,EACX,MACF,QACE,MAAM,IAAIW,MAAM,sBAIpB,GAAiB,OAAb8B,EAAmB,OAAO,KAC9B,IAAIY,EAASZ,EAASvB,YACtB,OAAQuB,EAASzB,MACf,IAAK,QACL,IAAK,aACH,OAAO,KACT,IAAK,aAEH,OADI0J,EAAe,IAAGA,EAAerH,EAAO/B,OAASoJ,EAAe,GAC7DzC,EAAQtF,WACb,CAACU,EAAOqH,GAAerH,EAAOqH,EAAe,IAC7CpI,EACA5B,GAEJ,IAAK,UAIH,OAHIsI,EAAgB,IAAGA,EAAgB3F,EAAO/B,OAAS0H,GACnD0B,EAAe,IACjBA,EAAerH,EAAO2F,GAAe1H,OAASoJ,EAAe,GACxDzC,EAAQtF,WACb,CACEU,EAAO2F,GAAe0B,GACtBrH,EAAO2F,GAAe0B,EAAe,IAEvCpI,EACA5B,GAEJ,IAAK,kBAKH,OAJIqI,EAAoB,IACtBA,EAAoB1F,EAAO/B,OAASyH,GAClC2B,EAAe,IACjBA,EAAerH,EAAO0F,GAAmBzH,OAASoJ,EAAe,GAC5DzC,EAAQtF,WACb,CACEU,EAAO0F,GAAmB2B,GAC1BrH,EAAO0F,GAAmB2B,EAAe,IAE3CpI,EACA5B,GAEJ,IAAK,eAQH,OAPIqI,EAAoB,IACtBA,EAAoB1F,EAAO/B,OAASyH,GAClCC,EAAgB,IAClBA,EAAgB3F,EAAO0F,GAAmBzH,OAAS0H,GACjD0B,EAAe,IACjBA,EACErH,EAAO0F,GAAmBC,GAAe1H,OAASoJ,EAAe,GAC9DzC,EAAQtF,WACb,CACEU,EAAO0F,GAAmBC,GAAe0B,GACzCrH,EAAO0F,GAAmBC,GAAe0B,EAAe,IAE1DpI,EACA5B,GAGN,MAAM,IAAIC,MAAM,qBAClB,CAmCA,SAAS6K,EAAUxL,EAASU,GAG1B,GADAA,EAAUA,GAAW,CAAC,GACjBuH,EAAQrC,SAASlF,GAAU,MAAM,IAAIC,MAAM,sBAChD,IAOI8B,EAPAoG,EAAenI,EAAQmI,cAAgB,EACvCE,EAAoBrI,EAAQqI,mBAAqB,EACjDC,EAAgBtI,EAAQsI,eAAiB,EACzCP,EAAa/H,EAAQ+H,YAAc,EAGnCnG,EAAa5B,EAAQ4B,WAGzB,OAAQtC,EAAQgB,MACd,IAAK,oBACC6H,EAAe,IACjBA,EAAe7I,EAAQ0D,SAASpC,OAASuH,GAC3CvG,EAAaA,GAActC,EAAQ0D,SAASmF,GAAcvG,WAC1DG,EAAWzC,EAAQ0D,SAASmF,GAAcpG,SAC1C,MACF,IAAK,UACHH,EAAaA,GAActC,EAAQsC,WACnCG,EAAWzC,EAAQyC,SACnB,MACF,IAAK,QACL,IAAK,aACH,OAAO,KACT,IAAK,aACL,IAAK,UACL,IAAK,kBACL,IAAK,eACHA,EAAWzC,EACX,MACF,QACE,MAAM,IAAIW,MAAM,sBAIpB,GAAiB,OAAb8B,EAAmB,OAAO,KAC9B,IAAIY,EAASZ,EAASvB,YACtB,OAAQuB,EAASzB,MACf,IAAK,QACH,OAAOiH,EAAQzH,MAAM6C,EAAQf,EAAY5B,GAC3C,IAAK,aAGH,OAFIqI,EAAoB,IACtBA,EAAoB1F,EAAO/B,OAASyH,GAC/Bd,EAAQzH,MAAM6C,EAAO0F,GAAoBzG,EAAY5B,GAC9D,IAAK,aAEH,OADI+H,EAAa,IAAGA,EAAapF,EAAO/B,OAASmH,GAC1CR,EAAQzH,MAAM6C,EAAOoF,GAAanG,EAAY5B,GACvD,IAAK,UAIH,OAHIsI,EAAgB,IAAGA,EAAgB3F,EAAO/B,OAAS0H,GACnDP,EAAa,IACfA,EAAapF,EAAO2F,GAAe1H,OAASmH,GACvCR,EAAQzH,MAAM6C,EAAO2F,GAAeP,GAAanG,EAAY5B,GACtE,IAAK,kBAKH,OAJIqI,EAAoB,IACtBA,EAAoB1F,EAAO/B,OAASyH,GAClCN,EAAa,IACfA,EAAapF,EAAO0F,GAAmBzH,OAASmH,GAC3CR,EAAQzH,MAAM6C,EAAO0F,GAAmBN,GAAanG,EAAY5B,GAC1E,IAAK,eAQH,OAPIqI,EAAoB,IACtBA,EAAoB1F,EAAO/B,OAASyH,GAClCC,EAAgB,IAClBA,EAAgB3F,EAAO0F,GAAmBzH,OAAS0H,GACjDP,EAAa,IACfA,EACEpF,EAAO0F,GAAmBC,GAAe1H,OAASmH,GAC/CR,EAAQzH,MACb6C,EAAO0F,GAAmBC,GAAeP,GACzCnG,EACA5B,GAGN,MAAM,IAAIC,MAAM,qBAClB,CAEAN,EAAQwJ,SAAWA,EACnBxJ,EAAQF,UAAYA,EACpBE,EAAQ6I,YAAcA,EACtB7I,EAAQqJ,YAAcA,EACtBrJ,EAAQsJ,cAAgBA,EACxBtJ,EAAQmL,UAAYA,EACpBnL,EAAQkL,YAAcA,EACtBlL,EAAQiK,YAAcA,EACtBjK,EAAQmK,cAAgBA,EACxBnK,EAAQ0J,SAAWA,EACnB1J,EAAQ+J,WAAaA,EACrB/J,EAAQ+K,SAAWA,EACnB/K,EAAQgL,WAAaA,EACrBhL,EAAQkJ,SAAWA,EACnBlJ,EAAQmJ,WAAaA,EACrBnJ,EAAQoK,YAAcA,EACtBpK,EAAQ6K,cAAgBA,C,wBC34CxBnF,OAAOK,eAAe/F,EAAS,aAAc,CAAEgG,OAAO,IACtD,IAAIkB,EAAY,EAAQ,OAWxB,SAASkE,EAAe1L,GACpB,OAAIgD,MAAMC,QAAQjD,GACP2L,EAAY3L,GAEnBA,GAAQA,EAAKA,KACN2L,EAAY3L,EAAKA,MAErB,CAAC4L,IAAOC,IACnB,CAcA,SAASC,EAAYC,EAAOpL,QACR,IAAZA,IAAsBA,EAAU,CAAC,QACvB4I,IAAVwC,GAAiC,OAAVA,IACvBA,EAAQ,GAGZ,IADA,IAAIpI,EAAW,GACNrC,EAAI,EAAGA,EAAIyK,EAAOzK,IACvBqC,EAASoG,KAAKvC,EAAU/G,MAAMiL,EAAe/K,EAAQX,QAEzD,OAAOwH,EAAUpE,kBAAkBO,EACvC,CAiBA,SAASqI,EAAcD,EAAOpL,QACV,IAAZA,IAAsBA,EAAU,CAAC,QAEvB4I,IAAVwC,GAAiC,OAAVA,IACvBA,EAAQ,GAEPvE,EAAUtE,SAASvC,EAAQsL,oBAA0C1C,IAAzB5I,EAAQsL,eACrDtL,EAAQsL,aAAe,IAEtBzE,EAAUtE,SAASvC,EAAQuL,yBACE3C,IAA9B5I,EAAQuL,oBACRvL,EAAQuL,kBAAoB,IAwBhC,IAtBA,IAAIvI,EAAW,GACXwI,EAAU,SAAU7K,GACpB,IAAI8K,EAAW,GACXC,EAAgBrJ,MAAMsJ,MAAM,KAAM,IAAItJ,MAAMrC,EAAQsL,aAAe,IAAI5I,IAAIc,KAAKoI,QAEpFF,EAAcnG,SAAQ,SAAUsG,EAAKC,EAAOC,GACxCA,EAAID,GAASA,EAAQ,EAAID,EAAME,EAAID,EAAQ,GAAKD,CACpD,IAEAH,EAAcnG,SAAQ,SAAUsG,GAC5BA,EAAa,EAANA,EAAUrI,KAAKe,GAAMmH,EAAcA,EAAc9K,OAAS,GACjE,IAAIoL,EAAexI,KAAKoI,SACxBH,EAASrC,KAAK,CACV4C,GAAgBhM,EAAQuL,mBAAqB,IAAM/H,KAAKyI,IAAIJ,GAC5DG,GAAgBhM,EAAQuL,mBAAqB,IAAM/H,KAAK0I,IAAIL,IAEpE,IACAJ,EAASA,EAAS7K,OAAS,GAAK6K,EAAS,GAEzCA,EAAWA,EAAS/I,IAAIyJ,EAAmBpB,EAAe/K,EAAQX,QAClE2D,EAASoG,KAAKvC,EAAU9G,QAAQ,CAAC0L,IACrC,EACS9K,EAAI,EAAGA,EAAIyK,EAAOzK,IACvB6K,EAAQ7K,GAEZ,OAAOkG,EAAUpE,kBAAkBO,EACvC,CAmBA,SAASoJ,EAAiBhB,EAAOpL,GAI7B,QAHgB,IAAZA,IAAsBA,EAAU,CAAC,GAErCA,EAAUA,GAAW,CAAC,GACjB6G,EAAU3B,SAASlF,GACpB,MAAM,IAAIC,MAAM,sBAEpB,IAAIZ,EAAOW,EAAQX,KACfiM,EAAetL,EAAQsL,aACvBe,EAAarM,EAAQqM,WACrBC,EAAetM,EAAQsM,kBACb1D,IAAVwC,GAAiC,OAAVA,IACvBA,EAAQ,KAGPvE,EAAUtE,SAAS+I,SACH1C,IAAjB0C,GACAA,EAAe,KACfA,EAAe,IAEdzE,EAAUtE,SAAS8J,SAA8BzD,IAAfyD,IACnCA,EAAa,MAEZxF,EAAUtE,SAAS+J,SAAkC1D,IAAjB0D,IACrCA,EAAe9I,KAAKe,GAAK,GAG7B,IADA,IAAIvB,EAAW,GACNrC,EAAI,EAAGA,EAAIyK,EAAOzK,IAAK,CAG5B,IAFA,IAAI4L,EAAgBxB,EAAe1L,GAC/BoM,EAAW,CAACc,GACPnL,EAAI,EAAGA,EAAIkK,EAAe,EAAGlK,IAAK,CACvC,IAAIoL,EAAmB,IAANpL,EACK,EAAhBoC,KAAKoI,SAAepI,KAAKe,GACzBf,KAAKiJ,KAAKhB,EAASrK,GAAG,GAAKqK,EAASrK,EAAI,GAAG,KACxCqK,EAASrK,GAAG,GAAKqK,EAASrK,EAAI,GAAG,KACtCiD,EAAQmI,GAAchJ,KAAKoI,SAAW,IAAOU,EAAe,EAC5DtI,EAAWR,KAAKoI,SAAWS,EAC/BZ,EAASrC,KAAK,CACVqC,EAASrK,GAAG,GAAK4C,EAAWR,KAAK0I,IAAI7H,GACrCoH,EAASrK,GAAG,GAAK4C,EAAWR,KAAKyI,IAAI5H,IAE7C,CACArB,EAASoG,KAAKvC,EAAU5E,WAAWwJ,GACvC,CACA,OAAO5E,EAAUpE,kBAAkBO,EACvC,CAEA,SAASmJ,EAAmBO,GACxB,OAAO,SAAUb,GACb,MAAO,CAACA,EAAI,GAAKa,EAAI,GAAIb,EAAI,GAAKa,EAAI,GAC1C,CACJ,CACA,SAASC,IACL,OAAOnJ,KAAKoI,SAAW,EAC3B,CACA,SAASX,IACL,OAAe,IAAR0B,GACX,CACA,SAASzB,IACL,OAAe,IAARyB,GACX,CACA,SAAS3B,EAAY3L,GACjB,MAAO,CACHmE,KAAKoI,UAAYvM,EAAK,GAAKA,EAAK,IAAMA,EAAK,GAC3CmE,KAAKoI,UAAYvM,EAAK,GAAKA,EAAK,IAAMA,EAAK,GAEnD,CApKAM,EAAQoL,eAAiBA,EAwBzBpL,EAAQwL,YAAcA,EAwDtBxL,EAAQ0L,cAAgBA,EAgExB1L,EAAQyM,iBAAmBA,C,wBCrK3B,IAAIQ,EAAI,EAAQ,OACZC,EAAO,EAAQ,OAInBD,EAAE,CAAEE,OAAQ,MAAOC,OAAO,EAAMC,YAAY,GAAQ,CAClDC,OAAQ,WACN,OAAOJ,EAAKK,IAAIC,UAAUC,SAAUC,KACtC,G,wBCPF,MAAMhO,EAAO,UACPuM,EAAS,EAAQ,OACjB/L,EAAwB,WAY9B,SAASyN,EAAwBvN,GAC/B,IAAIA,IAAYA,EAAQO,MAAyB,YAAjBP,EAAQO,OAAqF,IAA/D,CAAC,UAAU,gBAAgBmF,QAAQ1F,EAAQgC,SAASzB,MAChH,MAAM,IAAIL,MAAM,2DAElB,IAAKsN,EACL,MAAMC,EAAUnO,EAAKU,GACrB,GACEwN,EAAW3B,EAAOb,eAAeyC,UAE3B3N,EAAsB0N,EAAUxN,IAExC,OAAOwN,CACT,CAEAE,EAAO9N,QAAU2N,C,qEC9BjB,IAAII,EAAS,WAAa,IAAIC,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,cAAc,CAACF,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,0BAA0B,CAACF,EAAG,aAAa,CAACG,IAAI,SAASD,MAAM,CAAC,SAAWL,EAAIO,YAAY,OAASP,EAAIQ,aAAa,MAAQR,EAAIvK,MAAM,YAAYuK,EAAIS,SAAS,WAAWT,EAAIU,QAAQ,iBAAiBV,EAAIW,cAAc,KAAOX,EAAIY,QAAQT,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,mBAAmB,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,OAASL,EAAIa,SAAWb,EAAIc,YAAY,QAAU,OAAOX,EAAG,MAAM,CAACG,IAAI,aAAaD,MAAM,CAAC,GAAK,iBAAiBF,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,4BAA4B,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,IAAM,IAAIU,YAAYf,EAAIgB,GAAG,CAAC,CAACC,IAAI,YAAYC,GAAG,SAASZ,GAC/rB,IAAIa,EAAKb,EAAIa,GACTd,EAAQC,EAAID,MAChB,MAAO,CAACF,EAAG,QAAQH,EAAIoB,GAAGpB,EAAIqB,GAAG,CAACC,YAAY,WAAWjB,MAAM,CAAC,QAAU,GAAG,KAAO,GAAG,IAAM,IAAIc,GAAG,CAAC,MAAQnB,EAAIuB,gBAAgB,QAAQlB,GAAM,GAAOc,GAAI,CAAChB,EAAG,SAAS,CAACH,EAAIwB,GAAG,yBAAyB,GAAG,MAAM,CAACrB,EAAG,OAAO,CAACH,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0B,GAAG,oBAAoBvB,EAAG,OAAO,CAACG,IAAI,eAAeD,MAAM,CAAC,iBAAiBL,EAAI2B,aAAa,4BAA4B3B,EAAI4B,wBAAwB,YAAY5B,EAAIS,SAAS,gBAAgBT,EAAI6B,aAAa,cAAc7B,EAAI8B,WAAW,WAAW9B,EAAIa,QAAQ,MAAQb,EAAIvK,MAAM,MAAQuK,EAAI+B,MAAM,OAAS/B,EAAInL,OAAO,WAAamL,EAAIgC,eAAe,kBAAkBhC,EAAIiC,eAAe,KAAOjC,EAAItO,KAAK,KAAOsO,EAAIY,KAAK,KAAOZ,EAAI9I,KAAK,cAAc8I,EAAIkC,WAAW,WAAWlC,EAAIU,QAAQ,UAAYV,EAAImC,UAAU,aAAanC,EAAIoC,UAAU,gBAAkBpC,EAAIqC,YAAcrC,EAAIqC,WAAWC,KAAKC,QAAQ,QAAUvC,EAAIqC,WAAarC,EAAIqC,WAAWC,KAAKE,QAAU,SAAS,WAAaxC,EAAIyC,YAAYtB,GAAG,CAAC,cAAgBnB,EAAIuB,cAAc,kBAAoBvB,EAAI0C,YAAY,WAAa1C,EAAI2C,WAAW,cAAgB3C,EAAI4C,cAAc,WAAa5C,EAAI6C,eAAe,IAAI,IAAI,GAAG1C,EAAG,YAAY,CAACE,MAAM,CAAC,MAAQL,EAAI8C,QAAQ,QAAU,MAAM,UAAU,OAAO3C,EAAG,gBAAgB,CAACE,MAAM,CAAC,iBAAiBL,EAAI+C,cAAc,eAAe/C,EAAIgD,YAAY,cAAchD,EAAIiD,cAAc9C,EAAG,MAAM,CAACmB,YAAY,mBAAmB,CAAEtB,EAAmB,gBAAEG,EAAG,UAAU,CAACmB,YAAY,gBAAgBjB,MAAM,CAAC,KAAO,UAAU,YAAc,KAAK,CAACF,EAAG,IAAI,CAACH,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0B,GAAG,+BAA+B1B,EAAIwB,GAAG,MAAMxB,EAAIyB,GAAGzB,EAAI0B,GAAG,8BAA8B,OAAO1B,EAAIkD,KAAK/C,EAAG,UAAU,CAACE,MAAM,CAAC,GAAK,mBAAmB,KAAO,OAAO,YAAc,GAAG,WAAa,qBAAqB,UAAY,GAAG,KAAO,kBAAkB8C,MAAM,CAACnL,MAAOgI,EAA2B,wBAAEnG,SAAS,SAAUuJ,GAAMpD,EAAIqD,wBAAwBD,CAAG,EAAEE,WAAW,4BAA4B,CAACtD,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAIuD,IAAI,4BAA6BvD,EAAIW,gBAAgB,KAAKR,EAAG,oBAAoB,CAACE,MAAM,CAAC,OAASL,EAAIqD,wBAAwB,MAAQ,QAAQ,SAAW,GAAG,OAAS,IAAIF,MAAM,CAACnL,MAAOgI,EAAuB,oBAAEnG,SAAS,SAAUuJ,GAAMpD,EAAIwD,oBAAoBJ,CAAG,EAAEE,WAAW,0BAA0B,IAAI,IAAI,EAAE,EACzqEG,EAAkB,G,wECJlB,G,SAAS,WAAa,IAAIzD,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,YAAY,CAACmB,YAAY,cAAcjB,MAAM,CAAC,MAAQ,kBAAkB,CAAuB,MAArBL,EAAIW,eAAyBX,EAAIW,cAAgB,EAAGR,EAAG,MAAM,CAACA,EAAG,OAAO,CAACE,MAAM,CAAC,GAAK,mBAAmB,CAACL,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0D,oBAAoBvD,EAAG,MAAM,CAACA,EAAG,OAAO,CAACE,MAAM,CAAC,GAAK,mBAAmB,CAACL,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI2D,gBAAiB3D,EAAIS,WAAaT,EAAI4D,aAAczD,EAAG,MAAM,CAACmB,YAAY,mCAAmC,CAACnB,EAAG,OAAO,CAACmB,YAAY,YAAY,CAACtB,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0B,GAAG,oBAAoB,SAASvB,EAAG,OAAO,CAACmB,YAAY,aAAa,CAACtB,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAIS,UAAU,SAAST,EAAIkD,KAAK/C,EAAG,MAAM,CAACmB,YAAY,gBAAgBnB,EAAG,MAAM,CAACmB,YAAY,yBAAyB,CAACnB,EAAG,OAAO,CAACmB,YAAY,YAAY,CAACtB,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0B,GAAG,qBAAqB,QAAQvB,EAAG,OAAO,CAACmB,YAAY,YAAYjB,MAAM,CAAC,GAAK,eAAe,CAACL,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAIvK,OAAO,MAAMuK,EAAIyB,GAAGzB,EAAIU,SAAS,SAAUV,EAAqB,kBAAEG,EAAG,MAAM,CAACmB,YAAY,yBAAyB,CAACnB,EAAG,OAAO,CAACmB,YAAY,YAAY,CAACtB,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0B,GAAG,wBAAwB,QAAQvB,EAAG,OAAO,CAACmB,YAAY,aAAa,CAACtB,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0B,GAAG,oBAAqB,CAAE1J,MAAO,IAAI6L,KAAKC,aAAa9D,EAAI+D,MAAMC,QAAQC,OAAQjE,EAAI3J,SAAW,aAAiB2J,EAAIkD,KAAK/C,EAAG,MAAM,CAACmB,YAAY,0BAA0B,CAACnB,EAAG,OAAO,CAACmB,YAAY,YAAY,CAACtB,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAI0B,GAAG,qBAAqB,QAAQvB,EAAG,OAAO,CAACmB,YAAY,aAAa,CAACtB,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAInL,gBAAgB,EAAE,GACj/C,EAAkB,G,gCCgDtB,GACAqP,MAAAA,CACA,WACA,SACA,QACA,gBACA,WACA,WAEA5B,KATA,WAUA,OACA6B,UAAAA,KACAR,UAAAA,GACAS,iBAAAA,KAEA,EACAC,MAAAA,CACA5O,MAAAA,WACA,iBACA,GAEA6O,UAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,GACAC,EAAAA,EAAAA,IAAAA,CACAX,aAAAA,SAAAA,GAAA,oCAFA,IAIAF,cAJA,WAKA,kCACA,EACAc,kBAPA,WAQA,+BACA,IAEAC,QAAAA,CACAC,WADA,WACA,WACA,wBAGA,wBAEA,8CACA,qBACA7O,KAAAA,OAAAA,KAAAA,MAAAA,EAAAA,WAAAA,KAEA,QACA,EACA8O,UAbA,WAcA,uBACAC,cAAAA,KAAAA,iBAEA,IClG2T,I,0CCQvTC,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,WACA,MAIF,EAAeA,EAAiB,QAKhC,IAAkBA,EAAW,CAACC,QAAO,MCxBrC,IAAI,EAAS,WAAa,IAAI9E,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAMH,EAAIoB,GAAG,CAAC2D,MAAM,CAC9G/E,EAAIgF,UAAUC,OAAS,MAAQjF,EAAIkF,WAAalF,EAAImF,YACjDnF,EAAIoF,0BACJpF,EAAIqF,oBACF,wBACA,GACNrF,EAAIsF,aAAe,sBAAwB,GAC1C,uBAAyBtF,EAAIuF,MAAQlF,MAAM,CAAC,GAAK,kBAClDL,EAAIgF,UAAUC,OAAS,IACjB,CACEO,UAAW,WACPxF,EAAIkF,WAAY,CACpB,EACAO,WAAY,WACRzF,EAAIkF,WAAY,CACpB,GAEF,CAAC,GACT,CAAC/E,EAAG,MAAM,CAACmB,YAAY,yBAAyB,CAAEtB,EAAgB,aAAEG,EAAG,aAAa,CAACE,MAAM,CAAC,WAAaL,EAAI4B,2BAA2B5B,EAAIkD,MAAM,GAAG/C,EAAG,MAAM,CAACmB,YAAY,0BAA0B,CAACnB,EAAG,MAAM,CAACmB,YAAY,sBAAsB,CAACnB,EAAG,QAAQ,CAACE,MAAM,CAAC,IAAM,GAAG,UAAU,IAAIc,GAAG,CAAC,MAAQnB,EAAI0F,cAAc,CAACvF,EAAG,SAAS,CAACE,MAAM,CAAC,KAAO,KAAK,CAACL,EAAIwB,GAAG,+BAA+B,GAAGrB,EAAG,QAAQ,CAACE,MAAM,CAAC,GAAK,UAAU,IAAM,GAAG,UAAU,GAAG,SAAWL,EAAIuF,KAAO,GAAGpE,GAAG,CAAC,MAAQ,SAASwE,GAAQ3F,EAAIuF,MAAM,IAAI,CAACpF,EAAG,SAAS,CAACE,MAAM,CAAC,KAAO,KAAK,CAACL,EAAIwB,GAAG,8BAA8B,GAAGrB,EAAG,QAAQ,CAACE,MAAM,CAAC,GAAK,QAAQ,IAAM,GAAG,UAAU,GAAG,SAAWL,EAAIuF,KAAO,GAAGpE,GAAG,CAAC,MAAQ,SAASwE,GAAQ3F,EAAIuF,MAAM,IAAI,CAACpF,EAAG,SAAS,CAACE,MAAM,CAAC,KAAO,KAAK,CAACL,EAAIwB,GAAG,4BAA4B,GAAGrB,EAAG,QAAQ,CAACE,MAAM,CAAC,GAAK,SAAS,IAAM,GAAG,UAAU,IAAIc,GAAG,CAAC,MAAQ,SAASwE,GAAQ3F,EAAImF,WAAanF,EAAImF,SAAS,IAAI,CAAChF,EAAG,SAAS,CAACE,MAAM,CAAC,KAAO,KAAK,CAACL,EAAIwB,GAAG,WAAWxB,EAAIyB,GAAGzB,EAAImF,UAAY,OAAS,IAAI,QAAQ,IAAI,KACn+BnF,EAAIgF,UAAUC,MAAQ,MACjBjF,EAAI4F,sBACL5F,EAAIoF,yBACVjF,EAAG,QAAQ,CAACE,MAAM,CAAC,GAAK,kBAAkB,IAAM,GAAG,UAAU,GAAG,MAAQ,OAAOc,GAAG,CAAC,MAAQnB,EAAI6F,UAAU,CAAC1F,EAAG,SAAS,CAACE,MAAM,CAAC,MAAQ,UAAU,CAACL,EAAIwB,GAAG,kBAAkB,GAAGxB,EAAIkD,KAAoB,YAAdxD,KAAKkB,KAAoBT,EAAG,MAAM,CAACG,IAAI,MAAMD,MAAM,CAAC,GAAK,MAAM,KAAOL,EAAItO,MAAMyP,GAAG,CAAC,cAAgBnB,EAAI8F,iBAAiB9F,EAAIkD,KAAoB,YAAdxD,KAAKkB,KAAoBT,EAAG,WAAW,CAACG,IAAI,MAAMD,MAAM,CAAC,GAAK,MAAM,KAAOL,EAAI9I,KAAK,gBAAkB8I,EAAI+F,gBAAgB,QAAU/F,EAAIwC,QAAQ,KAAOxC,EAAItO,KAAK,SAAyB,YAAdgO,KAAKkB,MAAoBO,GAAG,CAAC,cAAgBnB,EAAI8F,iBAAiB9F,EAAIkD,KAAOlD,EAAIsF,aAAwNtF,EAAIkD,KAA9M/C,EAAG,WAAW,CAAC6F,WAAW,CAAC,CAAC1M,KAAK,OAAO2M,QAAQ,SAASjO,MAAOgI,EAAoB,iBAAEsD,WAAW,qBAAqBhD,IAAI,aAAagB,YAAY,wBAAwBjB,MAAM,CAAC,WAAa,WAAoBL,EAAIwB,GAAG,KAC3xBxB,EAAIqF,qBACArF,EAAIkG,0BACJlG,EAAIgF,UAAUC,MAAQ,KAAOjF,EAAIoF,0BAI8EpF,EAAIkD,KAH1H/C,EAAG,SAAS,CAACE,MAAM,CAAC,GAAK,eAAe,SAA+B,MAApBL,EAAI2B,cAC9B,MAAnB3B,EAAImG,aACJnG,EAAI4F,wBACDlG,KAAK0G,OAASpG,EAAIa,SAAUM,GAAG,CAAC,MAAQnB,EAAIqG,iBAAiB,CAACrG,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI0B,GAAG,eAAe,OAAiB1B,EAAuB,oBAAEG,EAAG,SAAS,CAACmG,MAAM,CAC1KC,gBAAiBvG,EAAIwG,oBAAsB,UAAY,WACxDnG,MAAM,CAAC,GAAK,cAAc,UAAYL,EAAIwG,qBAAqBrF,GAAG,CAAC,MAAQ,SAASwE,GAAQ,OAAO3F,EAAI4C,eAAc,EAAM,IAAI,CAAC5C,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI0B,GAAG,mBAAmB,OAAO1B,EAAIkD,KAAMlD,EAA0B,uBAAEG,EAAG,SAAS,CAACE,MAAM,CAAC,GAAK,kBAAkBc,GAAG,CAAC,MAAQ,SAASwE,GAAQ3F,EAAIyG,eAAgB,CAAI,IAAI,CAACzG,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI0B,GAAG,qBAAqB,OAAO1B,EAAIkD,KACtXlD,EAAIgF,UAAUC,MAAQ,MACjBjF,EAAI4F,uBACJ5F,EAAIoF,2BACJpF,EAAIqF,oBACXlF,EAAG,SAAS,CAACmB,YAAY,UAAUjB,MAAM,CAAC,GAAK,qBAAqBc,GAAG,CAAC,MAAQnB,EAAI0G,UAAU,CAAC1G,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI0B,GAAG,mBAAmB,OAAO1B,EAAIkD,KAAK/C,EAAG,gBAAgB,CAACE,MAAM,CAAC,iBAAiBL,EAAIyG,cAAc,gBAAgBzG,EAAI2G,aAAa,MAAQ3G,EAAI+B,MAAM,cAAc/B,EAAI8B,WAAW,OAAS9B,EAAInL,OAAO,KAAOmL,EAAI4G,KAAK,cAAgB5G,EAAIoG,KAAK,WAAapG,EAAIyC,WAAW,WAAWzC,EAAIU,SAASS,GAAG,CAAC,WAAanB,EAAI6C,WAAW,UAAY,SAAS8C,GAAQ,OAAO3F,EAAI4C,eAAc,EAAK,MAAM,EAAE,EACngB,EAAkB,GCrClB,G,4CAAS,WAAa,IAAI5C,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,WAAW,CAACE,MAAM,CAAC,MAAQL,EAAIyG,cAAc,YAAY,MAAM,WAAa,GAAG,WAAazG,EAAIgF,UAAUC,MAAQ,MAAM,CAAC9E,EAAG,SAAS,CAACE,MAAM,CAAC,MAAQ,YAAY,CAACF,EAAG,cAAc,CAACE,MAAM,CAAC,GAAK,cAAc,CAAGL,EAAIc,YAS7Rd,EAAIkD,KATsS/C,EAAG,QAAQ,CAACE,MAAM,CAAC,QAAU,WAAW,CAACF,EAAG,IAAI,CAACE,MAAM,CAAC,GAAK,gBAAgBwG,SAAS,CAAC,UAAY7G,EAAIyB,GACpZzB,EAAI0B,GAAG,uCAAwC,CAC3C7M,OAAQmL,EAAInL,UAEXmL,EAAI8G,aACC9G,EAAI0B,GAAG,yCAA0C,CAC/CrL,SAAU2J,EAAI+B,MAAQ,MAExB,UACE/B,EAAI+G,GAAI/G,EAAgB,cAAE,SAASgH,EAAK7I,GAAO,OAAOgC,EAAG,QAAQ,CAACc,IAAI9C,EAAMmD,YAAY,OAAOjB,MAAM,CAAC,QAAU,WAAW,CAACF,EAAG,OAAO,CAACE,MAAM,CAAC,GAAK,iBAAiB,CAAW,GAATlC,GAAuB,GAATA,GAAuB,GAATA,EAAYgC,EAAG,SAAS,CAACE,MAAM,CAAC,MAAiB,GAATlC,EAC5O,UACS,GAATA,EACI,UACA,YAAY,CAAC6B,EAAIwB,GAAG,eAAexB,EAAIkD,KAAK/C,EAAG,OAAO,CAAC0G,SAAS,CAAC,UAAY7G,EAAIyB,GAC3FzB,EAAI0B,GAAG,sCAAuC,CAC1CI,WAAYkF,EAAKlF,WACjBjN,OAAQmS,EAAKC,eAEZjH,EAAI8G,aACC9G,EAAI0B,GACF,wCACA,CACIrL,SAAU2Q,EAAKE,WAAa,MAGlC,SACR,IAAI,IAAG/G,EAAG,QAAQ,CAACmB,YAAY,OAAOjB,MAAM,CAAC,QAAU,WAAW,CAACF,EAAG,QAAQ,CAACmB,YAAY,OAAOjB,MAAM,CAAC,GAAK,oBAAoB,KAAO,GAAG,MAAQ,WAAWc,GAAG,CAAC,MAAQ,SAASwE,GAAQ,OAAO3F,EAAImH,MAAM,aAAa,IAAI,CAACnH,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI0B,GAAG,8BAA8B,OAAS1B,EAAIc,YAAqNd,EAAIkD,KAA5M/C,EAAG,QAAQ,CAACmB,YAAY,OAAOjB,MAAM,CAAC,GAAK,cAAc,KAAO,GAAG,MAAQ,WAAWc,GAAG,CAAC,MAAQ,SAASwE,GAAQ,OAAO3F,EAAImH,MAAM,YAAY,IAAI,CAACnH,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI0B,GAAG,mBAAmB,QAAiB,IAAI,IAAI,IAAI,EAAE,GAC1iB,EAAkB,GCkEtB,G,kBAAA,CACAwC,MAAAA,CACA,gBACA,eACA,aACA,QACA,SACA,cACA,OACA,OACA,aACA,WAEAI,SAAAA,CACAwC,aADA,WAEA,+BACA,GAEAzC,MAAAA,CACAoC,cAAAA,SAAAA,GACA,MACA,mBAEA,GAEAhC,QAAAA,CACA2C,aADA,WACA,WACA,kCAEAC,EADA,QACAA,GAEAA,KAAAA,MAAAA,GAEAA,EAAAA,MAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACA,WADA,IAEAtF,MAAAA,KAAAA,MACAlN,OAAAA,KAAAA,OACAyS,KAAAA,KAAAA,YACA,6BACA,kDACA,OACArM,EACAyF,QAAAA,KAAAA,QACA+B,WAAAA,KAAAA,cAEA8E,aAAAA,QAAAA,UAAAA,KAAAA,UAAAA,GACA,EACA1E,WAtBA,WAuBA,wBACA,KC9I8T,I,iECQ1T,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,WACA,MAIF,EAAe,EAAiB,QAUhC,IAAkB,EAAW,CAAC2E,KAAI,UAAM,cAAU,aAAQ,UAAM,SAAK,MC7BrE,IAAI,EAAS,WAAa,IAAIxH,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OACjFD,EAAI/L,YAC0B,kBAAnB+L,EAAI/L,aACV+L,EAAI/L,WAAWwT,OAASzH,EAAI/L,WAAWyT,aAC9CvH,EAAG,MAAM,CAACmB,YAAY,yBAAyB,CAACnB,EAAG,KAAK,CAACH,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI/L,WAAWwT,OAAO,OAAOtH,EAAG,IAAI,CAACH,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI/L,WAAWyT,aAAa,OAAQ1H,EAAI/L,WAAW0T,MAAQ3H,EAAI4H,SAAS5H,EAAI/L,WAAW0T,MAAOxH,EAAG,IAAI,CAACmB,YAAY,mBAAmBjB,MAAM,CAAC,KAAOL,EAAI/L,WAAW0T,KAAK,OAAS,WAAW,CAACxH,EAAG,SAAS,CAACE,MAAM,CAAC,MAAQ,cAAc,CAACL,EAAIwB,GAAG,sBAAsBxB,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAI0B,GAAG,0BAA0B,GAAG1B,EAAIkD,OAAOlD,EAAIkD,IAAI,EACjd,EAAkB,GCsBtB,GACA5J,KAAAA,aACA4K,MAAAA,CAAAA,cACAO,QAAAA,CACAmD,SADA,SACAC,GACA,iBACA,ICjCoU,ICQhU,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,WACA,MAIF,EAAe,EAAiB,QAKhC,IAAkB,EAAW,CAACC,MAAK,MCxBnC,IAAI,EAAS,WAAa,IAAI9H,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,QAAQ,CAACF,EAAG,UAAU,CAACG,IAAI,SAASD,MAAM,CAAC,GAAK,aAAa,OAAS,CAAE9C,IAAK,SAAUwK,KAAM,YAAa,KAAO,EAAE,cAAc,UAAU,QAAU,CAC/PC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,EACnBC,gBAAiB,YACjBC,gBAAgB,EAChBC,OAAQrI,EAAIsI,SAASC,MAAMC,KAAOxI,EAAIsI,SAASC,MAAME,OAAOD,KAAKE,KAAO1I,EAAIsI,SAASC,MAAME,OAAOE,MAAMD,UACtG,EAAE,EACZ,EAAkB,GCRTE,EAAW,CAEpB1E,MAAO,CAAC,QACRG,MAAO,CACH3S,KADG,WAECgO,KAAKmJ,cACR,GAELpE,QAAS,CACLoE,aADK,WAEGnJ,KAAK3K,MACD2K,KAAKhO,KACLgO,KAAK3K,IAAI+T,UAAU,CACfC,KAAMrJ,KAAKhO,KAAK,GAChBsX,MAAOtJ,KAAKhO,KAAK,GACjBuX,MAAOvJ,KAAKhO,KAAK,GACjBwX,KAAMxJ,KAAKhO,KAAK,MAGpBgO,KAAK3K,IAAIoU,QAAQ,GACjBzJ,KAAK3K,IAAIqU,UAAU,CAAC7L,IAAK,EAAGwK,IAAK,KAG5C,EACDsB,aAhBK,WAgBY,EACjBC,gBAjBK,WAiBe,IAI5B,ICNA,GACAhQ,KAAAA,MACAiQ,OAAAA,CAAAA,GACAjH,KAHA,WAIA,OACAvN,IAAAA,KACAyU,OAAAA,GACAC,QAAAA,GACAC,UAAAA,GACAC,aAAAA,EAAAA,GAEA,EACAC,QAZA,WAYA,6IACA,wBADA,OAEA,6CACA,QAEA,gBACA,IANA,4CAOA,EACAnF,QAAAA,CACAoF,UADA,SACAjK,EAAAkK,EAAAC,GACA,SACA,IACAC,EAAAA,CACAC,KAAAA,CACApC,IAAAA,OAAAA,SAAAA,OAAAA,+BACAqC,OAAAA,IAAAA,OAAAA,KAAAA,MAAAA,EAAAA,MAIA,IACAF,EAAAA,CACAD,MAAAA,IAGA,gDACAC,GADA,IAEApK,SAAAA,EACA7K,IAAAA,KAAAA,OAEA,oBACA,EACAoV,cAvBA,WAwBA,sCACA,6BAEA,eACA,EACAC,cA7BA,SA6BAtI,EAAAzL,EAAAxB,GAAA,8DACA,KACA,WACAwV,GAAAA,MAAAA,EAAAA,gBAGAA,GADA,MAEA,MACA,oCACA,SACA,yCAAA/D,MAAAA,OAAAgE,KAAAA,UAAA,UAGA,MACA,oCACA,SACA,yCAAAhE,MAAAA,OAAAgE,KAAAA,cAAA,cAGAD,GACA,WACA,kCACA,SACAxV,EAEA,kCACA0V,QAAAA,IAEAC,EAAAA,KACA,SACA,aACA1I,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,EAAAA,GAGA,EACAuH,aAhEA,SAgEAoB,GAAA,wGACA,GACAC,KAAAA,aACAC,cAAAA,EACAC,MAAAA,GAEA,4BACAF,KAAAA,CAAAA,EAAAA,GACAC,cAAAA,EACAE,YAAAA,KAAAA,aAAAA,EAAAA,KAAAA,aAAAA,QACAC,MAAAA,CACA,CACAb,KAAAA,EACAc,OAAAA,IACAC,OAAAA,WAIAC,EAAAA,OAAAA,KAAAA,KACA,sBACA,EACA3B,gBArFA,WAsFA,wCACA,8BAEA,EACA4B,eA1FA,WA0FA,WACA,+CACA,uCAEA,kBAGA,sBAGA,iCACA,IACA,gBACA,GACA,EACAC,eAzGA,WA0GAC,OAAAA,KAAAA,MAAAA,eAAAA,KAAAA,IAAAA,QACA,EACAtC,UA5GA,WA+GA,IAFA,mCAEA,8BACA,8BACAuC,EAAAA,OAAAA,KAAAA,QAAAA,GAAAA,eAIA,qBACA,ICjK6T,ICQzT,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,WACA,MAIF,EAAe,EAAiB,QCnB5B,EAAS,WAAa,IAAIrL,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACmB,YAAY,YAAYjB,MAAM,CAAC,GAAK,QAAQ,CAACF,EAAG,MAAM,CAACmB,YAAY,eAAe,CAAEtB,EAAIsL,eAAiBtL,EAAIuL,SAAUpL,EAAG,MAAM,CAACmB,YAAY,YAAYjB,MAAM,CAAC,MAAQL,EAAIuL,WAAW,CAAEvL,EAAY,SAAEG,EAAG,WAAW,CAACE,MAAM,CAAC,KAAO,MAAM,QAAU,GAAG,WAAWL,EAAIwL,YAAcxL,EAAIyL,kBAAkBzL,EAAIkD,KAAK/C,EAAG,OAAO,CAACmB,YAAY,0BAA0ByD,MAAM,CAChc2G,OAAQ1L,EAAIwL,WACZG,QAAS3L,EAAIwL,WACb,gBAAiBxL,EAAIwL,WACrBI,OAAQ5L,EAAI6L,WACb,CAAC7L,EAAIwB,GAAG,IAAIxB,EAAIyB,GAAGzB,EAAIuL,UAAU,QAAQ,GAAGvL,EAAIkD,KAAK/C,EAAG,UAAU,CAACG,IAAI,SAASD,MAAM,CAAC,GAAK,WAAW,OAAS,CAAE9C,IAAK,SAAUwK,KAAM,YAAa,KAAO,EAAE,cAAc,UAAU,QAAU,CAClMC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,EACnBC,gBAAiB,YACjBC,gBAAgB,EAChBC,OAAQrI,EAAIsI,SAASC,MAAMC,KAAOxI,EAAIsI,SAASC,MAAME,OAAOD,KAAKE,KAAO1I,EAAIsI,SAASC,MAAME,OAAOE,MAAMD,UACtG,GAAI1I,EAAI8L,gBAAgB7Y,OAAS,EAAGkN,EAAG,MAAM,CAACmB,YAAY,gBAAgBtB,EAAI+G,GAAI/G,EAAmB,iBAAE,SAASgK,GAAM,OAAO7J,EAAG,MAAM,CAACc,IAAI+I,EAAKlI,WAAWR,YAAY,qBAAqByD,MAAM,CAAEgH,KAAM/L,EAAI6L,WAAY,CAAE7L,EAAY,SAAEG,EAAG,WAAW,CAACE,MAAM,CAAC,WAAW2J,EAAK9S,QAAQ8I,EAAIkD,KAAK/C,EAAG,IAAI,CAACH,EAAIwB,GAAGxB,EAAIyB,GAAGuI,EAAKlI,eAAiB9B,EAAI6L,SAAiD7L,EAAIkD,KAA3C/C,EAAG,OAAO,CAACH,EAAIwB,GAAGxB,EAAIyB,GAAGuI,EAAK9S,UAAmB,EAAE,IAAG,GAAG8I,EAAIkD,MAAM,EAC5a,EAAkB,G,qBCgDtB,GACAqG,OAAAA,CAAAA,GACAyC,WAAAA,CACAC,SAAAA,EAAAA,GAEA/H,MAAAA,CACAhN,KAAAA,CACAvE,KAAAA,QAEAoT,gBAAAA,OACAvD,QAAAA,CACA7P,KAAAA,OACAuZ,QAAAA,UAEAL,SAAAA,SAEAvJ,KAhBA,WAiBA,OACAvN,IAAAA,KACAuW,cAAAA,KACAa,MAAAA,CAAAA,EACA1C,QAAAA,GACA2C,aAAAA,EACAZ,WAAAA,KACAa,UAAAA,KACAP,gBAAAA,GAEA,EACAxH,UAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,GACAgI,EAAAA,EAAAA,IAAAA,CAAAA,eADA,IAEAf,SAFA,WAGA,4DACA,wBACA,sCAGA,oCAEA,EACAE,eAXA,WAYA,0BACA,mBACAc,eAAA,WACAC,YAAA,mBACAvR,CACA,IAEA2O,QA/CA,WA+CA,6IACA,+BADA,uBAEA,wBAFA,OAGA,6CACA,QACA,0CACA,0CACA,4BACAtD,MAAAA,CACAqE,cAAAA,EACA8B,YAAAA,EACAC,aAAAA,KAGAC,EAAAA,GAAAA,UACAC,EAAAA,WAAAA,GAEAA,EAAAA,OAAAA,EAAAA,KACAA,EAAAA,YAAAA,SAAAA,WACA,gBAGA,iBACA,0BACAjC,cAAAA,EACA8B,YAAAA,IAGA,8BACA,qBACA,gCAEAG,EAAAA,SAAAA,CACAjC,cAAAA,GACA8B,YAAAA,GACA5B,YAAAA,UACAgC,UAAAA,YAGA,kBACA,QACA,gBACAD,EACAL,eAAA,WACAC,YAAA,aAGA,IACA,kCACA,CACA,IACA,gBACA,IApDA,4CAqDA,EACA/H,SAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,GACAqI,EAAAA,EAAAA,IAAAA,CAAAA,eADA,IAEAjD,UAFA,SAEAkD,EAAAjD,EAAA5S,GACA,uBACA,IACA,0BACA,uCACA0I,SAAAA,EACA7K,IAAAA,KAAAA,OAGA,gBACA,wBACA0X,YAAAA,GACA9B,cAAAA,GACAkC,UAAAA,EAAAA,UAAAA,UACAhC,YAAAA,EAAAA,UAAAA,YAEA,qBAEA,EACAV,cArBA,WAqBA,WACA,kCACA,qBACAQ,cAAAA,EACA8B,YAAAA,GAEA,IACA,oBACA,6BACA9B,cAAAA,EACA8B,YAAAA,IAGA,iBACA,4BACA,qBAEA,gBACA,uBACA,EACArC,cAzCA,SAyCAtI,EAAAkL,EAAAC,EAAAC,EAAAhW,GACA,8BAAA4K,WAAAA,EAAA5K,KAAAA,GACA,EACAgU,eA5CA,WA6CA,oBACA,6BACAP,cAAAA,EACA8B,YAAAA,IAGA,wBACA,qBACA,oBAEA,mBACA,EACAtB,eAzDA,WA0DA,mBACA,EACArC,UA5DA,WA6DA,UACA,oBAEA,mBAEA,KCpOkU,KCQ9T,IAAY,OACd,GACA,EACA,GACA,EACA,KACA,WACA,MAIF,GAAe,GAAiB,QCjBzB,SAASqE,GAAS9W,EAAU+W,EAAYC,EAAMzM,GACjD,OAAQA,GACJ,KAAK0M,EAAAA,GAAAA,KACD,OAAOzX,KAAKJ,MACR8X,GAAelX,EAAU+W,GAAcvX,KAAK2X,KAAKH,EAAO,MAGhE,QACI,OAAOE,GAAelX,EAAU+W,GAE3C,CAED,SAASG,GAAelX,EAAU+W,GAC9B,GAAI/W,EAAW,GACX,OAAO,IAEP,IAAMlE,EAAQ0D,KAAKJ,MACf,IAAOI,KAAK2X,KAAMnX,EAAW,IAAO+W,IAGxC,OAAIjb,EAAQ,IACD,IACAA,EAAQ,EACR,EAEJA,CAEd,CCsJD,QACA6Z,WAAAA,CACAyB,cAAAA,EACAC,WAAAA,EACAC,IAAAA,EACAC,SAAAA,IAEA1J,MAAAA,CACA,eACA,0BACA,WACA,eACA,aACA,UACA,QACA,QACA,SACA,iBACA,aACA,OACA,OACA,OACA,aACA,UACA,YACA,YACA,kBACA,UACA,cAEA5B,KA9BA,WA+BA,OACAqE,aAAAA,GACAP,KAAAA,KACAD,YAAAA,KACA9P,SAAAA,KACAlE,MAAAA,KACAyT,sBAAAA,EACAR,0BAAAA,EACAyI,YAAAA,EACAC,uBAAAA,EACAzI,qBAAAA,EACAa,wBAAAA,EACAO,eAAAA,EACAvB,WAAAA,EACAK,KAAAA,EACAwI,kBAAAA,EACA5I,UAAAA,SAAAA,aAAAA,QAAAA,aACAG,cAAAA,EACA0I,kBAAAA,EACApH,KAAAA,CACA9F,cAAAA,KAAAA,SACAmN,KAAAA,IAAAA,KACAC,OAAAA,IAEAC,UAAAA,KAEA,EACA7J,SAAAA,CACAkC,oBADA,WAEA,2CAGA,0BAMA,GAEAnC,MAAAA,CACAc,UADA,WAEAoC,aAAAA,QAAAA,YAAAA,KAAAA,UACA,GAEAqC,QA5EA,WA4EA,mJACA,wBADA,OAEA,uCACA,+BACA,mBACA,+BACA,+BACArE,EAAA,EAEA,aACA,sCAEA,+BAEA,yBAOA,GANAA,EAAAA,EAAAA,MAAAA,QAAAA,MACA,MACA,+BAEA,8BAAAA,KAAAA,EAAAA,IAIA,cACA,iBACA6I,EAAAA,MAAAA,SAAAA,eAAAA,GACAA,EACAC,MAAA,SACAzW,SACA,mBACA0W,EAAAA,MAAAA,QAAAA,QAAAA,EAAAA,IADA,KAIAF,EAAAA,MAAAA,SAAAA,gBAAAA,EACA,CACA,uCACA,2BAEA,sBAGA,QACA,KACAA,EAAAA,MAAAA,SAAAA,SAAAA,SAAAA,GACA,MACA,0BACA,QACAC,MAAA,YACAE,MACA,IACAF,MAAA,aACAE,MACAC,EAAAA,IAAAA,OAAAA,KAAAA,OAAAA,CACAjR,IAAAA,EACAwK,IAAAA,GAEA,MACAyG,EAAAA,EAAAA,MAAAA,QAAAA,MAGA,QACAH,MAAA,cACAA,MAAAI,EAAAA,KACAF,MACA,IACAF,MAAA,2BACAK,YAEA,WAAI,EAAJ,WAEAC,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACAC,GADA,IAEAN,MAAAA,IAEA,yBACAE,EACAxb,EACA,gBAEA,sBACAwb,GACA,EACA1M,GAAAA,EAAAA,OAAAA,EACAA,EAAAA,GAAAA,cACA,IAEA,0BACAA,EACAzL,EACAxB,GACA,EACA2Z,GAEAxb,GACA,IACA,wBACA,oBACA4M,UAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACA,yBADA,IAEA1I,KAAAA,EAAAA,OAEAyX,QAAAA,IAEA,yCAEA,kBAEA,+BAEA,oBAEAP,EACAC,MAAA,eACAzW,SAAA,YACA,QACAyW,MAAA,cACAA,MAAAI,EAAAA,KACAF,MACA,IACAF,MAAA,cACAA,MAAAI,EAAAA,KACAF,MACA,UACA,qBACAzM,WAAAA,EACAoF,WAAAA,EACAD,YAAAA,GAEA,IAEA,qBACA,qBACA4H,SAAAA,EAAAA,aACAA,SAAAA,EAAAA,YAFA,IAKA,6BAGA,wBAEA,CAIAT,EAAAA,MAAAA,cAAAA,eACA,YAEA,6BAIA,qBACA,gBACA,eACAA,EAAAA,MAAAA,SAAAA,eAAAA,IAEA,oCAEA,sBAEA,CACA,KAlKA,4CAoKA,EACA3J,QAAAA,CACAqB,cADA,SACAiH,GACA,kBACA,EACArG,QAJA,WAKA,gCACA,EACAb,QAPA,WAQA,gCACA,EACAH,YAVA,WAUA,WACA,6CACA,uBACAoJ,YAAAA,WACA,0BACA,GAEA,EACAzI,eAlBA,WAmBA,yBAEA,UAGA,UACAgI,MAAA,kCACAU,KAAAC,EAAAA,EAAAA,IAAAA,KAAAA,YAAAA,KAAAA,QAGA,+CAEA,4BACA,iBACA,EACA,mBAGA,6BACA,KACA,cACA,YACA,EACA,oBAEA,qBACA,2BACA,yBACA,+BAEA,4BAEA,0BAGA,gCAGA,6BACA,mBAGA,6BACA,EACAC,qBA/DA,SA+DAtN,GACA,0BAEA,mBACA,+BACA,4CAEA,qBACA,EACAJ,cAxEA,WAyEA,2BACA,EACA2N,kBA3EA,WA4EA,8BAEA,qDAEA,2CACA,qBAEA,yBACA9D,OAAAA,KAAAA,SAAAA,UAAAA,uBACA,kBACA,mBAIA,cACA,cACA,gBACA+D,EACA,iBAIA,UACA,UACAd,MAAA,gDACAU,KAFA,mBAGAC,EAAAA,EAAAA,IAAAA,KAAAA,YAAAA,KAAAA,OAHA,IAIA3Y,SAAAA,KAAAA,SACAxB,OAAAA,KAAAA,MACAsa,WAAAA,KAGA,uBACAb,MAAAA,KAAAA,YACApX,KAAAA,KAAAA,KACA0I,SAAAA,KAAAA,aACAvJ,SAAAA,KAAAA,SACAxB,OAAAA,KAAAA,MACAsa,WAAAA,IAIA,wDACA,EACAjE,eAxHA,WAyHA,gCACA,uBACA,EACAtI,cA5HA,WA4HA,8DACA,IACA,sBACA,gCAIA,sBACA,6BACA,mBACA,4BACA,yBACA,yBAEA,0BAEA,eAGA,qBACA,+BACA,iCACA,8BAGA,6BACA,EACAC,WAvJA,WAwJA,sBACA,WACA,UACAwL,MAAA,uCACAU,KAAA,GACA,wBACA,IClkBqT,MCQjT,IAAY,OACd,GACA,EACA,GACA,EACA,KACA,WACA,MAIF,GAAe,GAAiB,QAMhC,IAAkB,GAAW,CAACvH,KAAI,UAAM,MCzBxC,IAAI,GAAS,WAAa,IAAIxH,EAAIN,KAASO,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,WAAW,CAACE,MAAM,CAAC,MAAQL,EAAI+C,cAAc,YAAY,MAAM,WAAa,GAAG,WAAa/C,EAAIgF,UAAUC,MAAQ,MAAM,CAAC9E,EAAG,SAAS,CAACE,MAAM,CAAC,MAAQ,YAAY,CAACF,EAAG,eAAe,CAACA,EAAG,OAAO,CAACmB,YAAY,wBAAwBjB,MAAM,CAAC,GAAK,eAAe,CAACL,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAIgD,kBAAkB7C,EAAG,cAAc,CAACA,EAAG,cAAc,CAACA,EAAG,OAAO,CAACH,EAAIwB,GAAGxB,EAAIyB,GAAGzB,EAAIiD,kBAAkB,IAAI,IAAI,EAAE,EAChe,GAAkB,GCyBtB,IACAiB,MAAAA,CAAAA,gBAAAA,cAAAA,eC3B8T,M,YCQ1T,IAAY,OACd,GACA,GACA,IACA,EACA,KACA,WACA,MAIF,GAAe,GAAiB,QAShC,IAAkB,GAAW,CAACkL,MAAK,cAAU,gBAAW,gBAAW,aAAQ,M,qICjBrEC,GAAAA,WACF,WACIC,EACAC,EACAC,EACAC,IACF,gBACE/P,KAAK4P,iBAAmBA,EACxB5P,KAAK6P,aAAeA,EACpB7P,KAAK8P,aAAeA,EACpB9P,KAAK+P,iBAAmBA,EACxB/P,KAAKgQ,QAAU,IAAItE,OAAOuE,KAAKN,kBAC/B3P,KAAKkQ,eAAiB,EACzB,C,sFAED,WAAoBna,GAApB,0GAEI,GAFuBoa,EAA3B,+BAAiD,EAEzCnQ,KAAK+P,iBACLK,EAAS,GACHC,EAAYrQ,KAAK+P,iBAAiBha,EAAQ,GAChDmK,EAAW,IAAIwL,OAAOuE,KAAKK,OAAOD,EAAU,GAAIA,EAAU,QACvD,CAEH,GACI1D,EAAY3M,KAAKuQ,wBACbvQ,KAAKkQ,eAAeM,SAAS7D,EAAUzM,SAASH,aAExDC,KAAKkQ,eAAenU,KAAK4Q,EAAUzM,SAASH,YAE5CqQ,EAASzD,EAAUyD,OACnBlQ,EAAWyM,EAAUzM,SACrBgC,EAA0ByK,EAAUpY,UACvC,CAjBL,yBAmBW,IAAIkc,SAAQ,SAACC,GAChB,EAAKV,QAAQW,YACT,CACIC,SAAU1Q,EACV2Q,WAAY,UACZT,OAAAA,EACAU,OAAQ,EAAKlB,iBAAiBmB,YACxB,UACA,WAPd,yCASI,WAAOnO,EAAMoO,GAAb,0EAEQA,IAAWtF,OAAOuE,KAAKgB,iBAAiBC,IACvCtO,GACAA,EAAKgO,UACL,EAAKO,iBAAiBvO,GAL/B,4BAOQ8N,EAPR,SAOsB,EAAKU,cAAcrb,GAPzC,qEASQ2a,EATR,UAUkB,EAAKW,8BACPtb,EACA6M,EACAuN,EACAjO,GAdhB,+EATJ,oCAAAlC,KAAA,eA6BH,KAjDL,gD,8IAoDA,WACIjK,EACA6M,EACAuN,EACAjO,GAJJ,oFAM2BoP,GAAkB,EAChB,MAArBtR,KAAK8P,eACLyB,GAAoBC,EAAAA,EAAAA,IAChBC,GAAAA,GAAgB,CACZ7O,EAAKgO,SAASc,OAAOrJ,MACrBzF,EAAKgO,SAASc,OAAO7T,QAEzBmC,KAAK8P,kBAGa,IAAtByB,GAA+BpB,EAAsB,GAhB7D,yCAiBenQ,KAAKoR,cAAcrb,EAAOoa,EAAsB,IAjB/D,cAoBkC,IAAtBoB,IACAD,GAAkB,GArB9B,mBAyB6BtR,KAAK2R,aAAa/O,GAzB/C,QAyBYgP,EAzBZ,qFA2BmB5R,KAAKoR,cAAcrb,IA3BtC,iCA8Be,CACH8b,SAAUjP,EACVkP,UAAW5P,GAA2B,KACtC1K,KAAMoa,EACNG,QAAST,IAlCrB,0D,6FAwCA,WACI,GAAyB,MAArBtR,KAAK8P,aAAsB,CAC3B,IAAI5P,EACAkQ,EACA7b,EAAa,KACjB,GAA+B,sBAA3ByL,KAAK8P,aAAa7c,KAA8B,CAChD,IAAI+e,EAAU7b,KAAK8b,MACf9b,KAAKoI,SAAWyB,KAAK8P,aAAana,SAASpC,QAGzCe,EAAU0L,KAAK8P,aAAana,SAASqc,GAC3Czd,EAAaD,EAAQC,WACS,UAA1BD,EAAQI,SAASzB,MACjBiN,EAAW5L,EAAQI,SAASvB,YAC5Bid,EAAS,KAETA,EAA6C,KAApC8B,EAAAA,EAAAA,KAAmBlgB,EAAAA,GAAAA,GAAKsC,IACjC4L,EAAWD,KAAwB3L,GAE1C,MACG8b,EAAuD,KAA9C8B,EAAAA,EAAAA,KAAmBlgB,EAAAA,GAAAA,GAAKgO,KAAK8P,eACtC5P,EAAWD,KAAwBD,KAAK8P,cAG5C,MAAO,CACHM,OAAAA,EACAlQ,SAAU,IAAIwL,OAAOuE,KAAKK,OAAOpQ,EAAS,GAAIA,EAAS,IACvD3L,WAAAA,EAEP,CAGD,IAAMsJ,EAAsB,IAAhB1H,KAAKoI,SAAiB,GAC5B8J,EAAsB,IAAhBlS,KAAKoI,SAAiB,IAElC,MAAO,CACH6R,OAAQ,IACRlQ,SAAU,IAAIwL,OAAOuE,KAAKK,OAAOzS,EAAKwK,GACtC9T,WAAY,KAEnB,G,8BAED,SAAiBqO,GACb,QACI5C,KAAK4P,iBAAiBuC,sBAEb,yBAAyBC,KAAKxP,EAAKyP,aACnCzP,EAAK0P,WACN1P,EAAK2P,MAAMhf,OAAS,GACnByB,MAAMC,QAAQ2N,EAAK3G,IAAwB,IAAlB2G,EAAK3G,EAAE1I,QAGhD,G,mEAED,WAAmBqP,GAAnB,mFAEQ,CAAC4P,EAAAA,GAAAA,QAAmBA,EAAAA,GAAAA,aAAuBhC,SACvCxQ,KAAK6P,aAAa3O,MAH9B,sBAOYlB,KAAK6P,aAAa3O,OAASsR,EAAAA,GAAAA,SAC1BxS,KAAK6P,aAAalN,YACf3C,KAAK6P,aAAalN,WAAWC,KAAK3P,OAC9Bwf,EAAAA,GAAAA,WAVpB,0CAYmBC,EAAAA,EAAAA,IACH9P,EAAKgO,SAASc,OACd1R,KAAK6P,aAAalN,YACd3C,KAAK6P,aAAalN,WAAWC,OAfjD,UAkBkBpL,EAAOwI,KAAK6P,aAAa8C,UAAUhd,SAASid,MAC9C,SAACte,GAAD,OACI9B,EAAAA,GAAAA,GACI,CACIoQ,EAAKgO,SAASc,OAAOrJ,MACrBzF,EAAKgO,SAASc,OAAO7T,OAEzBvJ,EANR,IAUCkD,EA7BjB,uBA8BsB,IAAI5E,MAAM,kBA9BhC,eAgCsB2O,EAAMvB,KAAK6P,aAAalN,WACxB3C,KAAK6P,aAAalN,WAAWC,KAAKE,QAClC,SAlCtB,kBAmCuBtL,EAAKjD,WAAWgN,IAnCvC,iD,8DAjKEoO,GA4MN,MCvNA,IACI/M,KADW,WAEP,MAAO,CACHiQ,SAAS,EAEhB,EACD9N,QAAS,CACL+N,aADK,SACQC,GACTA,EAAMC,YAAchT,KAAKgC,GAAG,yBAC/B,GAELiR,QAXW,WAYPC,OAAOC,iBAAiB,eAAgBnT,KAAK8S,aAChD,EACDM,iBAdW,SAcMC,EAAKC,EAAOC,GACzB,GAAKvT,KAAK6S,QAQNU,QARe,CACf,IAAMC,EAASN,OAAOO,QAAQzT,KAAKgC,GAAG,2BAClCwR,EACAD,IAEAA,GAAK,EAEZ,CAGJ,EACDG,cA1BW,WA2BPR,OAAOS,oBAAoB,eAAgB3T,KAAK8S,aACnD,GCgGL,IACAxG,WAAAA,CACAsH,WAAAA,EACAC,KAAAA,GACAC,cAAAA,IAEAjK,OAAAA,CAAAA,IACArF,MAAAA,CACAzD,SAAAA,CACAyL,QAAAA,KACAvZ,KAAAA,QAGA8d,YAAAA,CACAvE,SAAAA,EACAvZ,KAAAA,SAEAkf,mBAAAA,CACA3F,SAAAA,EACAvZ,KAAAA,SAEAkP,aAAAA,CACAqK,QAAAA,KACAvZ,KAAAA,QAEAmP,WAAAA,CACAoK,QAAAA,KACAvZ,KAAAA,QAEA6c,aAAAA,CACAtD,QAAAA,KACAvZ,KAAAA,QAEAmO,YAAAA,CACAoL,SAAAA,EACAvZ,KAAAA,SAEA0a,KAAAA,CACAnB,QAAAA,EACAvZ,KAAAA,QAEAya,WAAAA,CACAlB,QAAAA,IACAvZ,KAAAA,QAEAkN,QAAAA,CACAqM,QAAAA,KACAvZ,KAAAA,OAEA8c,iBAAAA,CACAvD,QAAAA,KACAvZ,KAAAA,OAEA8gB,aAAAA,CACAvH,QAAAA,EAAAA,GAAAA,QACAvZ,KAAAA,QAEA+gB,WAAAA,CACAxH,SAAAA,EACAvZ,KAAAA,SAEAghB,YAAAA,CACAzH,SAAAA,EACAvZ,KAAAA,SAEAihB,YAAAA,CACA1H,SAAAA,EACAvZ,KAAAA,SAEAkhB,mBAAAA,CACA3H,SAAAA,EACAvZ,KAAAA,SAEAwP,UAAAA,CACA+J,QAAAA,EACAvZ,KAAAA,QAEAyP,UAAAA,CACA8J,QAAAA,EAAAA,GAAAA,OACAvZ,KAAAA,QAEA0P,WAAAA,CACA1P,KAAAA,QAEA8P,WAAAA,CACA9P,KAAAA,OACAmhB,UAAAA,EACA5H,aAAAA,GAEA6H,gBAAAA,CACAphB,KAAAA,OACAmhB,UAAAA,EACA5H,QAAAA,IAGA5J,KA/FA,WAgGA,OACApL,KAAAA,KACAyK,aAAAA,KACAC,wBAAAA,KACAG,MAAAA,EACAxB,YAAAA,EACA1L,OAAAA,EACA2L,aAAAA,EACA/K,MAAAA,EACAwM,eAAAA,KAAAA,KACArB,KAAAA,KAAAA,aACAsB,WAAAA,KAAAA,mBACAxB,QAAAA,KAAAA,mBAAAA,GAAAA,KAAAA,gBACAC,cAAAA,EACAqT,QAAAA,KACAC,iBAAAA,EACAC,qBAAAA,EACApR,SAAAA,EACAsD,KAAAA,KACAvF,SAAAA,EACAkC,cAAAA,KAAAA,YACAC,YAAAA,KAAAA,GAAAA,kCACAC,WAAAA,GACA+N,iBAAAA,EACAO,SAAAA,KAEAvP,eAAAA,KAAAA,WACAtQ,KAAAA,KAAAA,QACA2R,yBAAAA,EACA8Q,cAAAA,EAEAC,kBAAAA,KAEA,EACA9P,UAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,GACAgI,EAAAA,EAAAA,IAAAA,CAAAA,eADA,IAEA9I,oBAFA,WAGA,gDACA,IAEAoG,QAxIA,WAwIA,kIAEA,yCACA,uBAHA,gCAKA,YACA,yCANA,uBASA,wBATA,UAUA,8CACA,oBAGA,sBACA,2BACA,CAAA6G,YAAAA,EAAAA,YAAAoB,mBAAAA,EAAAA,oBACA,CAAAjR,KAAAA,EAAAA,KAAAyB,WAAAA,EAAAA,WAAAgQ,UAAAA,EAAAA,WACA,eACA,qBAIA,cAvBA,kCAwBA,mBAxBA,QAyBA,sCAEA,sBACA,oBACA,8BACA,uBA9BA,2BAmCA,YACA,aAGA,sCAEA,mBAzCA,kCA0CA,mBA1CA,QA6CA,+BACA,+BAEA,yBAEA,IACA,EACAhE,MAAA,iBACAgG,SAAA,2BAEA,OACAhG,MAAA,iBACAA,MAAA,yBACAU,IAAA,GAGA,oBACA,QACAV,MACA,mBACA,QACA,aAEAE,MACA,IACAF,MACA,mBACA,QACA,cAEAE,MAEA,SACAF,MACA,oCAEAE,MACA,oBACAF,MACA,uCAEAE,MACA,4BACAF,MACA,mBACA,QACA,cAEAE,MACA,sCACA+F,EACAC,GAEA,iBACA,CAKAnG,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,gBACAA,EAAAA,MAAAA,QAAAA,OACA,YAGA,mBACA,gBAEA,aACA,sCAGA,mBACAC,MAAA,kBACAE,MAEA,sBACA,oBACA,8BACA,wBAOAH,EAAAA,MAAAA,cAAAA,eACAA,EAAAA,MAAAA,QAAAA,QAEA,gCACA,aACA,gBAEA,MAEA,YAEA,IA7IA,QAgJA,4BAhJA,6CAiJA,EACAgF,cA1RA,WA2RA,0CACAoB,SACAC,cAAA,iBACApB,oBAAA,uCAEAmB,SACAC,cAAA,iBACApB,oBACA,YACA,gCAGAT,OAAAA,oBAAAA,eAAAA,KAAAA,cACA,YAGA,mCACA,gBAEA,EACAnO,SAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,GACAqI,EAAAA,EAAAA,IAAAA,CAAAA,eADA,IAEA4H,eAFA,WAEA,2JACA,2CADA,gBACAnD,EADA,EACAA,SAAAC,EADA,EACAA,UAAAC,EADA,EACAA,QAAAva,EADA,EACAA,KACA,iCACA,4BACA,SACA,iBAEA,eAEA,OACAmX,MAAA,4BACAU,KAFA,gBAGA4F,SAAAA,EAAAA,aAAAA,MACAC,UAAAA,EAAAA,aAAAA,MACApD,UAAAA,GACAta,GAAAA,CAAAA,KAAAA,IANA,IAOAua,QAAAA,KAhBA,6CAmBA,EACAlQ,cAtBA,WAuBA,wCACAmO,EAAAA,YACA,CACAY,SAAAA,KAAAA,aACAC,WAAAA,UACAT,OAAAA,GACAU,OAAAA,KAAAA,YAAAA,UAAAA,WAEA,iBAEA,EACAqE,YAlCA,SAkCAvS,GAAA,WACA,0BACAwS,gBAAAA,EACA9M,mBAAAA,EACA+M,gBAAAA,EACAC,uBAAAA,EACAC,gBAAAA,EACAvB,WAAAA,KAAAA,WACAC,YAAAA,KAAAA,YACAuB,YAAAA,KAAAA,YACAC,wBAAAA,KAAAA,YACAC,aAAAA,KAAAA,YACAC,UAAAA,KAAAA,cAGA,gEACAb,SACAC,cAAA,wCACAa,SACAxG,YAAAA,WACA,0CACA0F,SACAC,cAAA,iBACA5B,iBACA,UACA,0BAGA2B,SACAC,cAAA,iBACA5B,iBACA,YACA,4BAEA2B,SACAC,cAAA,iBACA5B,iBACA,aACA,4BAEA2B,SACAC,cAAA,iBACA5B,iBACA,cACA,4BAGA,OAEA,eACA,uCACA,sBACA0C,QAAAA,IACAC,MAAAA,IAGA,wBACA,EACAC,UA5FA,SA4FApI,EAAAqI,GACA,eACAC,EAAAA,WAAAA,EAAAA,aAAAA,GACA,IACA,qBACA,iCAEA,qBACA,4CAEA,eACA,kBAEA,EACAjR,WA1GA,WA0GA,+EACA,iBACA,4BACA,EACA7O,KAAAA,OAAAA,KAAAA,QAAAA,KAAAA,OAAAA,MAEA,qBACAiZ,YAAAA,WACA,eACA,SAEA,wBACA,2BAEA,yCACA,WAGA,8CACA8G,EAAAA,EAAAA,IACA,eACA,gBACA,6BACA,WAKA,6CACA,qDAMA,EACAlT,YA9IA,SA8IArM,EAAAxB,GAEA,4BACA,mBACA,sBAEA,cACA,eAEA,mBACA,UACAwZ,MAAA,uCACAU,IAAA,YACA,UACAV,MAAA,wCACAU,IAAA,aAGA,2DACA,sBAEA,EACApM,WApKA,WAqKA,4BACA,8BACA,qBACA,sBACA,gCACA,gBACA,6BACA,EACAC,cA7KA,WA6KA,gBAAI,EAAJ,gIAAAiT,EAAAA,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GACA,IACA,UACA,gBACA,iBACA,UACA,YAIA,oBACA,YACA,aACA,qBACA,yBACA,qBACA,+BAEA,gBACA,mBACA,cAIA,WAEA,iCA1BA,kCA2BA,mBA3BA,QA4BA,oCACA,8BA7BA,wBAiCA,OACAxH,MAAA,iCACAU,IAAA,SAnCA,QAqCA,sCArCA,6CAsCA,EACA+G,SApNA,WAsNA,0DACA,+CACA,sBACA,gBACA,WACA,gBACA,mBACA,+BAEA,sBAEA,EACAjT,WAlOA,WAmOA,gBACA,kBAIA,yBACA,0CAEA,mBACA,uBAPA,6BASA,EACAkT,uBA/OA,SA+OAC,KAEA,kBACA,uCACA,kBACA,wCACA,iBACA,4CAEAA,EAAAA,iBAEA,EACAC,yBA3PA,SA2PAD,GACA,oCACA,KCxqB2T,M,gDCQvT,IAAY,OACd,GACAjW,EACA0D,GACA,EACA,KACA,WACA,MAIF,GAAe,GAAiB,QAUhC,IAAkB,GAAW,CAACyS,OAAM,UAAK,UAAM,aAAS,qBAAgB,cAAS,M","sources":["webpack://geoguess/./node_modules/@turf/bbox/dist/js/index.js","webpack://geoguess/./node_modules/@turf/boolean-point-in-polygon/dist/js/index.js","webpack://geoguess/./node_modules/@turf/helpers/dist/js/index.js","webpack://geoguess/./node_modules/@turf/invariant/dist/js/index.js","webpack://geoguess/./node_modules/@turf/meta/dist/js/index.js","webpack://geoguess/./node_modules/@turf/random/dist/js/index.js","webpack://geoguess/./node_modules/core-js/modules/web.url.to-json.js","webpack://geoguess/./node_modules/random-position-in-polygon/index.js","webpack://geoguess/./src/pages/StreetView.vue?f1d5","webpack://geoguess/./src/components/HeaderGame.vue?97b3","webpack://geoguess/src/components/HeaderGame.vue","webpack://geoguess/./src/components/HeaderGame.vue?0cad","webpack://geoguess/./src/components/HeaderGame.vue","webpack://geoguess/./src/components/Maps.vue?2308","webpack://geoguess/./src/components/DialogSummary.vue?fc7c","webpack://geoguess/src/components/DialogSummary.vue","webpack://geoguess/./src/components/DialogSummary.vue?e03d","webpack://geoguess/./src/components/DialogSummary.vue","webpack://geoguess/./src/components/game/DetailsMap.vue?5360","webpack://geoguess/src/components/game/DetailsMap.vue","webpack://geoguess/./src/components/game/DetailsMap.vue?e9dc","webpack://geoguess/./src/components/game/DetailsMap.vue","webpack://geoguess/./src/components/map/Map.vue?54cc","webpack://geoguess/./src/components/map/mixins/MapMixin.js","webpack://geoguess/src/components/map/Map.vue","webpack://geoguess/./src/components/map/Map.vue?8e14","webpack://geoguess/./src/components/map/Map.vue","webpack://geoguess/./src/components/map/MapAreas.vue?b9b8","webpack://geoguess/src/components/map/MapAreas.vue","webpack://geoguess/./src/components/map/MapAreas.vue?b99d","webpack://geoguess/./src/components/map/MapAreas.vue","webpack://geoguess/./src/utils/game/score.js","webpack://geoguess/src/components/Maps.vue","webpack://geoguess/./src/components/Maps.vue?55e7","webpack://geoguess/./src/components/Maps.vue","webpack://geoguess/./src/components/DialogMessage.vue?2255","webpack://geoguess/src/components/DialogMessage.vue","webpack://geoguess/./src/components/DialogMessage.vue?4c8a","webpack://geoguess/./src/components/DialogMessage.vue","webpack://geoguess/./src/plugins/StreetViewService.js","webpack://geoguess/./src/mixins/ConfirmExitMixin.js","webpack://geoguess/src/pages/StreetView.vue","webpack://geoguess/./src/pages/StreetView.vue?ecb3","webpack://geoguess/./src/pages/StreetView.vue"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexports.default = bbox;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = require(\"@turf/invariant\");\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = invariant_1.getCoord(point);\n    var geom = invariant_1.getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\nexports.default = booleanPointInPolygon;\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\nexports.getCoord = getCoord;\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\nexports.getCoords = getCoords;\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        helpers_1.isNumber(coordinates[0]) &&\n        helpers_1.isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\nexports.containsNumber = containsNumber;\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\nexports.geojsonType = geojsonType;\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\nexports.featureOf = featureOf;\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\nexports.collectionOf = collectionOf;\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\nexports.getGeom = getGeom;\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\nexports.getType = getType;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Returns a random position within a {@link bounding box}.\n *\n * @name randomPosition\n * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.\n * @returns {Array<number>} Position [longitude, latitude]\n * @example\n * var position = turf.randomPosition([-180, -90, 180, 90])\n * // => position\n */\nfunction randomPosition(bbox) {\n    if (Array.isArray(bbox)) {\n        return coordInBBox(bbox);\n    }\n    if (bbox && bbox.bbox) {\n        return coordInBBox(bbox.bbox);\n    }\n    return [lon(), lat()];\n}\nexports.randomPosition = randomPosition;\n/**\n * Returns a random {@link point}.\n *\n * @name randomPoint\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n * // => points\n */\nfunction randomPoint(count, options) {\n    if (options === void 0) { options = {}; }\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        features.push(helpers_1.point(randomPosition(options.bbox)));\n    }\n    return helpers_1.featureCollection(features);\n}\nexports.randomPoint = randomPoint;\n/**\n * Returns a random {@link polygon}.\n *\n * @name randomPolygon\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a\n * vertex can reach out of the center of the Polygon.\n * @returns {FeatureCollection<Polygon>} GeoJSON FeatureCollection of polygons\n * @example\n * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n * // => polygons\n */\nfunction randomPolygon(count, options) {\n    if (options === void 0) { options = {}; }\n    // Default param\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    if (!helpers_1.isNumber(options.num_vertices) || options.num_vertices === undefined) {\n        options.num_vertices = 10;\n    }\n    if (!helpers_1.isNumber(options.max_radial_length) ||\n        options.max_radial_length === undefined) {\n        options.max_radial_length = 10;\n    }\n    var features = [];\n    var _loop_1 = function (i) {\n        var vertices = [];\n        var circleOffsets = Array.apply(null, new Array(options.num_vertices + 1)).map(Math.random);\n        // Sum Offsets\n        circleOffsets.forEach(function (cur, index, arr) {\n            arr[index] = index > 0 ? cur + arr[index - 1] : cur;\n        });\n        // scaleOffsets\n        circleOffsets.forEach(function (cur) {\n            cur = (cur * 2 * Math.PI) / circleOffsets[circleOffsets.length - 1];\n            var radialScaler = Math.random();\n            vertices.push([\n                radialScaler * (options.max_radial_length || 10) * Math.sin(cur),\n                radialScaler * (options.max_radial_length || 10) * Math.cos(cur),\n            ]);\n        });\n        vertices[vertices.length - 1] = vertices[0]; // close the ring\n        // center the polygon around something\n        vertices = vertices.map(vertexToCoordinate(randomPosition(options.bbox)));\n        features.push(helpers_1.polygon([vertices]));\n    };\n    for (var i = 0; i < count; i++) {\n        _loop_1(i);\n    }\n    return helpers_1.featureCollection(features);\n}\nexports.randomPolygon = randomPolygon;\n/**\n * Returns a random {@link linestring}.\n *\n * @name randomLineString\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a\n * vertex can be from its predecessor\n * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a\n * line segment can turn from the previous segment.\n * @returns {FeatureCollection<LineString>} GeoJSON FeatureCollection of linestrings\n * @example\n * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n * // => lineStrings\n */\nfunction randomLineString(count, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    if (!helpers_1.isObject(options)) {\n        throw new Error(\"options is invalid\");\n    }\n    var bbox = options.bbox;\n    var num_vertices = options.num_vertices;\n    var max_length = options.max_length;\n    var max_rotation = options.max_rotation;\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    // Default parameters\n    if (!helpers_1.isNumber(num_vertices) ||\n        num_vertices === undefined ||\n        num_vertices < 2) {\n        num_vertices = 10;\n    }\n    if (!helpers_1.isNumber(max_length) || max_length === undefined) {\n        max_length = 0.0001;\n    }\n    if (!helpers_1.isNumber(max_rotation) || max_rotation === undefined) {\n        max_rotation = Math.PI / 8;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        var startingPoint = randomPosition(bbox);\n        var vertices = [startingPoint];\n        for (var j = 0; j < num_vertices - 1; j++) {\n            var priorAngle = j === 0\n                ? Math.random() * 2 * Math.PI\n                : Math.tan((vertices[j][1] - vertices[j - 1][1]) /\n                    (vertices[j][0] - vertices[j - 1][0]));\n            var angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;\n            var distance = Math.random() * max_length;\n            vertices.push([\n                vertices[j][0] + distance * Math.cos(angle),\n                vertices[j][1] + distance * Math.sin(angle),\n            ]);\n        }\n        features.push(helpers_1.lineString(vertices));\n    }\n    return helpers_1.featureCollection(features);\n}\nexports.randomLineString = randomLineString;\nfunction vertexToCoordinate(hub) {\n    return function (cur) {\n        return [cur[0] + hub[0], cur[1] + hub[1]];\n    };\n}\nfunction rnd() {\n    return Math.random() - 0.5;\n}\nfunction lon() {\n    return rnd() * 360;\n}\nfunction lat() {\n    return rnd() * 180;\n}\nfunction coordInBBox(bbox) {\n    return [\n        Math.random() * (bbox[2] - bbox[0]) + bbox[0],\n        Math.random() * (bbox[3] - bbox[1]) + bbox[1],\n    ];\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\n\n// `URL.prototype.toJSON` method\n// https://url.spec.whatwg.org/#dom-url-tojson\n$({ target: 'URL', proto: true, enumerable: true }, {\n  toJSON: function toJSON() {\n    return call(URL.prototype.toString, this);\n  }\n});\n","'use strict';\n\nconst bbox = require('@turf/bbox').default;\nconst random = require('@turf/random');\nconst booleanPointInPolygon = require('@turf/boolean-point-in-polygon').default;\n\n/**\n * Return random position inside geoJson Feature<(Polygon|MultiPolygon)>.\n * @param {Feature<(Polygon|MultiPolygon)>} polygon\n * @returns {Array<number>} Position [longitude, latitude]\n * @throws {Exception}\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n * var positionRandom = randomPositionInPolygon();\n *\n */\nfunction randomPositionInPolygon(polygon) {\n  if(!polygon || !polygon.type || polygon.type !== 'Feature' || ['Polygon','MultiPolygon'].indexOf(polygon.geometry.type) === -1) {\n    throw new Error('param polygon must be a Feature<(Polygon|MultiPolygon)>')\n  }\n  let  position;\n  const bboxObj = bbox(polygon);\n  do {\n    position = random.randomPosition(bboxObj)\n  }\n  while (!booleanPointInPolygon(position, polygon));\n\n  return position;\n}\n\nmodule.exports = randomPositionInPolygon;","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"game-page\"}},[_c('div',{attrs:{\"id\":\"street-view-container\"}},[_c('HeaderGame',{ref:\"header\",attrs:{\"distance\":_vm.scoreHeader,\"points\":_vm.pointsHeader,\"round\":_vm.round,\"room-name\":_vm.roomName,\"nb-round\":_vm.nbRound,\"remaining-time\":_vm.remainingTime,\"mode\":_vm.mode}}),_c('div',{attrs:{\"id\":\"game-interface\"}},[_c('v-overlay',{attrs:{\"value\":!_vm.isReady && _vm.multiplayer,\"opacity\":\"1\"}}),_c('div',{ref:\"streetView\",attrs:{\"id\":\"street-view\"}}),_c('div',{attrs:{\"id\":\"game-interface__overlay\"}},[_c('v-tooltip',{attrs:{\"top\":\"\"},scopedSlots:_vm._u([{key:\"activator\",fn:function(ref){\nvar on = ref.on;\nvar attrs = ref.attrs;\nreturn [_c('v-btn',_vm._g(_vm._b({staticClass:\"resetBtn\",attrs:{\"rounded\":\"\",\"dark\":\"\",\"fab\":\"\"},on:{\"click\":_vm.resetLocation}},'v-btn',attrs,false),on),[_c('v-icon',[_vm._v(\"mdi-crosshairs-gps\")])],1)]}}])},[_c('span',[_vm._v(_vm._s(_vm.$t('Maps.reset')))])]),_c('Maps',{ref:\"mapContainer\",attrs:{\"random-lat-lng\":_vm.randomLatLng,\"random-feature-properties\":_vm.randomFeatureProperties,\"room-name\":_vm.roomName,\"player-number\":_vm.playerNumber,\"player-name\":_vm.playerName,\"is-ready\":_vm.isReady,\"round\":_vm.round,\"score\":_vm.score,\"points\":_vm.points,\"difficulty\":_vm.difficultyData,\"time-limitation\":_vm.timeLimitation,\"bbox\":_vm.bbox,\"mode\":_vm.mode,\"area\":_vm.area,\"time-attack\":_vm.timeAttack,\"nb-round\":_vm.nbRound,\"countdown\":_vm.countdown,\"score-mode\":_vm.scoreMode,\"areasGeoJsonUrl\":_vm.areaParams && _vm.areaParams.data.urlArea,\"pathKey\":_vm.areaParams ? _vm.areaParams.data.pathKey : 'iso_a2',\"mapDetails\":_vm.mapDetails},on:{\"resetLocation\":_vm.resetLocation,\"calculateDistance\":_vm.updateScore,\"showResult\":_vm.showResult,\"goToNextRound\":_vm.goToNextRound,\"finishGame\":_vm.finishGame}})],1)],1)],1),_c('v-overlay',{attrs:{\"value\":_vm.overlay,\"opacity\":\"0.8\",\"z-index\":\"1\"}}),_c('DialogMessage',{attrs:{\"dialog-message\":_vm.dialogMessage,\"dialog-title\":_vm.dialogTitle,\"dialog-text\":_vm.dialogText}}),_c('div',{staticClass:\"alert-container\"},[(_vm.isVisibleDialog)?_c('v-alert',{staticClass:\"warning-alert\",attrs:{\"type\":\"warning\",\"dismissible\":\"\"}},[_c('b',[_vm._v(_vm._s(_vm.$t('StreetView.nearby.title')))]),_vm._v(\" : \"+_vm._s(_vm.$t('StreetView.nearby.message'))+\" \")]):_vm._e(),_c('v-alert',{attrs:{\"id\":\"warningCountdown\",\"type\":\"info\",\"dismissible\":\"\",\"transition\":\"slide-x-transition\",\"prominent\":\"\",\"icon\":\"mdi-clock-fast\"},model:{value:(_vm.isVisibleCountdownAlert),callback:function ($$v) {_vm.isVisibleCountdownAlert=$$v},expression:\"isVisibleCountdownAlert\"}},[_vm._v(\" \"+_vm._s(_vm.$tc('StreetView.countdownAlert', _vm.remainingTime))+\" \"),_c('v-progress-linear',{attrs:{\"active\":_vm.isVisibleCountdownAlert,\"color\":\"white\",\"absolute\":\"\",\"bottom\":\"\"},model:{value:(_vm.countdownPercentage),callback:function ($$v) {_vm.countdownPercentage=$$v},expression:\"countdownPercentage\"}})],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('v-app-bar',{staticClass:\"header-game\",attrs:{\"color\":\"grey darken-4\"}},[(_vm.remainingTime != null && _vm.remainingTime > 0)?_c('div',[_c('span',{attrs:{\"id\":\"countdown-text\"}},[_vm._v(_vm._s(_vm.countdownText))])]):_c('div',[_c('span',{attrs:{\"id\":\"countdown-text\"}},[_vm._v(_vm._s(_vm.timerText))])]),(_vm.roomName && !_vm.streamerMode)?_c('div',{staticClass:\"round-score-container room-name\"},[_c('span',{staticClass:\"sub-text\"},[_vm._v(_vm._s(_vm.$t('HeaderGame.room'))+\" : \")]),_c('span',{staticClass:\"main-text\"},[_vm._v(\" \"+_vm._s(_vm.roomName)+\" \")])]):_vm._e(),_c('div',{staticClass:\"flex-grow-1\"}),_c('div',{staticClass:\"round-score-container\"},[_c('span',{staticClass:\"sub-text\"},[_vm._v(_vm._s(_vm.$t('HeaderGame.round'))+\": \")]),_c('span',{staticClass:\"main-text\",attrs:{\"id\":\"roundLabel\"}},[_vm._v(\" \"+_vm._s(_vm.round)+\" / \"+_vm._s(_vm.nbRound)+\" \")])]),(_vm.isDistanceVisible)?_c('div',{staticClass:\"round-score-container\"},[_c('span',{staticClass:\"sub-text\"},[_vm._v(_vm._s(_vm.$t('HeaderGame.distance'))+\": \")]),_c('span',{staticClass:\"main-text\"},[_vm._v(_vm._s(_vm.$t('HeaderGame.kmaway', { value: new Intl.NumberFormat(_vm.$i18n.locale).format( _vm.distance / 1000 ), })))])]):_vm._e(),_c('div',{staticClass:\"round-points-container\"},[_c('span',{staticClass:\"sub-text\"},[_vm._v(_vm._s(_vm.$t('HeaderGame.score'))+\": \")]),_c('span',{staticClass:\"main-text\"},[_vm._v(_vm._s(_vm.points))])])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div>\n        <v-app-bar class=\"header-game\" color=\"grey darken-4\">\n            <div v-if=\"remainingTime != null && remainingTime > 0\">\n                <span id=\"countdown-text\">{{ countdownText }}</span>\n            </div>\n\n            <div v-else>\n                <span id=\"countdown-text\">{{ timerText }}</span>\n            </div>\n            <div\n                v-if=\"roomName && !streamerMode\"\n                class=\"round-score-container room-name\"\n            >\n                <span class=\"sub-text\">{{ $t('HeaderGame.room') }} : </span>\n                <span class=\"main-text\">\n                    {{ roomName }}\n                </span>\n            </div>\n            <div class=\"flex-grow-1\" />\n            <div class=\"round-score-container\">\n                <span class=\"sub-text\">{{ $t('HeaderGame.round') }}: </span>\n                <span id=\"roundLabel\" class=\"main-text\">\n                    {{ round }} / {{ nbRound }}\n                </span>\n            </div>\n            <div v-if=\"isDistanceVisible\" class=\"round-score-container\">\n                <span class=\"sub-text\">{{ $t('HeaderGame.distance') }}: </span>\n                <span class=\"main-text\">{{\n                    $t('HeaderGame.kmaway', {\n                        value: new Intl.NumberFormat($i18n.locale).format(\n                            distance / 1000\n                        ),\n                    })\n                }}</span>\n            </div>\n            <div class=\"round-points-container\">\n                <span class=\"sub-text\">{{ $t('HeaderGame.score') }}: </span>\n    \n                <span class=\"main-text\">{{ points }}</span>\n            </div>\n        </v-app-bar>\n    </div>\n</template>\n\n<script>\nimport { getCountdownText } from '@/utils';\nimport { GAME_MODE } from '../constants';\nimport { mapState } from 'vuex';\nexport default {\n    props: [\n        'distance',\n        'points',\n        'round',\n        'remainingTime',\n        'roomName',\n        'nbRound',\n    ],\n    data() {\n        return {\n            startedAt: null,\n            timerText: '',\n            intervalFunction: null,\n        };\n    },\n    watch: {\n        round: function () {\n            this.startTimer();\n        },\n    },\n    computed: {\n        ...mapState({\n            streamerMode: (state) => state.homeStore.streamerMode,\n        }),\n        countdownText() {\n            return getCountdownText(this.remainingTime);\n        },\n        isDistanceVisible() {\n            return this.mode !== GAME_MODE.COUNTRY;\n        },\n    },\n    methods: {\n        startTimer() {\n            if (this.remainingTime != 0) {\n                return;\n            }\n            this.startedAt = new Date();\n\n            this.intervalFunction = setInterval(() => {\n                this.timerText = getCountdownText(\n                    Math.round((Date.now() - this.startedAt) / 1000)\n                );\n            }, 1000);\n        },\n        stopTimer() {\n            if (this.intervalFunction) {\n                clearInterval(this.intervalFunction);\n            }\n        },\n    },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.header-game {\n    z-index: 3;\n    opacity: 0.8;\n}\n\n.toolbar-title {\n    color: white;\n}\n\n.round-score-container {\n    padding: 0 10px 0 40px;\n}\n\n.round-points-container {\n    padding: 0 10px 0 40px;\n}\n\n.main-text,\n#countdown-text {\n    color: white;\n}\n\n.sub-text {\n    color: #616161;\n}\n@media (max-width: 555px) {\n    .room-name {\n        display: none;\n    }\n    .main-text,\n    .sub-text,\n    #countdown-text {\n        font-size: 14px;\n    }\n\n    .round-score-container {\n        padding: 0 5%;\n        .sub-text {\n            display: none;\n        }\n    }\n\n    .round-points-container {\n        padding: 0 5%;\n        .sub-text {\n            display: none;\n        }\n    }\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HeaderGame.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HeaderGame.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./HeaderGame.vue?vue&type=template&id=32189a00&scoped=true&\"\nimport script from \"./HeaderGame.vue?vue&type=script&lang=js&\"\nexport * from \"./HeaderGame.vue?vue&type=script&lang=js&\"\nimport style0 from \"./HeaderGame.vue?vue&type=style&index=0&id=32189a00&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"32189a00\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAppBar } from 'vuetify/lib/components/VAppBar';\ninstallComponents(component, {VAppBar})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',_vm._g({class:[\n        (_vm.$viewport.width >= 450 && (_vm.activeMap || _vm.pinActive)) ||\n            _vm.isMakeGuessButtonClicked ||\n            _vm.isNextButtonVisible\n            ? 'container-map--active'\n            : '',\n        _vm.printMapFull ? 'container-map--full' : '',\n        (\"container-map--size-\" + _vm.size) ],attrs:{\"id\":\"container-map\"}},\n        _vm.$viewport.width >= 450 // Only on tablet and desktop Issue #104\n            ? {\n                mouseover: function () {\n                    _vm.activeMap = true;\n                },\n                mouseleave: function () {\n                    _vm.activeMap = false;\n                },\n            }\n            : {}\n    ),[_c('div',{staticClass:\"container-map_details\"},[(_vm.printMapFull)?_c('DetailsMap',{attrs:{\"properties\":_vm.randomFeatureProperties}}):_vm._e()],1),_c('div',{staticClass:\"container-map_controls\"},[_c('div',{staticClass:\"container-map_btns\"},[_c('v-btn',{attrs:{\"fab\":\"\",\"x-small\":\"\"},on:{\"click\":_vm.showNotepad}},[_c('v-icon',{attrs:{\"dark\":\"\"}},[_vm._v(\" mdi-file-document-edit \")])],1),_c('v-btn',{attrs:{\"id\":\"btnDown\",\"fab\":\"\",\"x-small\":\"\",\"disabled\":_vm.size < 2},on:{\"click\":function($event){_vm.size--}}},[_c('v-icon',{attrs:{\"dark\":\"\"}},[_vm._v(\" mdi-arrow-bottom-left \")])],1),_c('v-btn',{attrs:{\"id\":\"btnUp\",\"fab\":\"\",\"x-small\":\"\",\"disabled\":_vm.size > 3},on:{\"click\":function($event){_vm.size++}}},[_c('v-icon',{attrs:{\"dark\":\"\"}},[_vm._v(\" mdi-arrow-top-right \")])],1),_c('v-btn',{attrs:{\"id\":\"btnPin\",\"fab\":\"\",\"x-small\":\"\"},on:{\"click\":function($event){_vm.pinActive = !_vm.pinActive}}},[_c('v-icon',{attrs:{\"dark\":\"\"}},[_vm._v(\" mdi-pin\"+_vm._s(_vm.pinActive ? '-off' : '')+\" \")])],1)],1)]),(\n            _vm.$viewport.width < 450 &&\n                !_vm.isGuessButtonClicked &&\n                _vm.isMakeGuessButtonClicked\n        )?_c('v-btn',{attrs:{\"id\":\"hide-map-button\",\"fab\":\"\",\"x-small\":\"\",\"color\":\"red\"},on:{\"click\":_vm.hideMap}},[_c('v-icon',{attrs:{\"color\":\"white\"}},[_vm._v(\" mdi-close \")])],1):_vm._e(),(this.mode === 'classic')?_c('Map',{ref:\"map\",attrs:{\"id\":\"map\",\"bbox\":_vm.bbox},on:{\"setSeletedPos\":_vm.setSeletedPos}}):_vm._e(),(this.mode !== 'classic')?_c('MapAreas',{ref:\"map\",attrs:{\"id\":\"map\",\"area\":_vm.area,\"areasGeoJsonUrl\":_vm.areasGeoJsonUrl,\"pathKey\":_vm.pathKey,\"bbox\":_vm.bbox,\"showFlag\":this.mode === 'country'},on:{\"setSeletedPos\":_vm.setSeletedPos}}):_vm._e(),(!_vm.printMapFull)?_c('textarea',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isNotepadVisible),expression:\"isNotepadVisible\"}],ref:\"refNotepad\",staticClass:\"container-map_notepad\",attrs:{\"spellcheck\":\"false\"}}):_vm._e(),_vm._v(\" \"),(\n            !_vm.isNextButtonVisible &&\n                !_vm.isSummaryButtonVisible &&\n                (_vm.$viewport.width > 450 || _vm.isMakeGuessButtonClicked)\n        )?_c('button',{attrs:{\"id\":\"guess-button\",\"disabled\":_vm.randomLatLng == null ||\n                _vm.selectedPos == null ||\n                _vm.isGuessButtonClicked ||\n                (!!this.room && !_vm.isReady)},on:{\"click\":_vm.selectLocation}},[_vm._v(\" \"+_vm._s(_vm.$t('Maps.guess'))+\" \")]):_vm._e(),(_vm.isNextButtonVisible)?_c('button',{style:({\n            backgroundColor: _vm.isNextButtonEnabled ? '#F44336' : '#B71C1C',\n        }),attrs:{\"id\":\"next-button\",\"disabled\":!_vm.isNextButtonEnabled},on:{\"click\":function($event){return _vm.goToNextRound(false)}}},[_vm._v(\" \"+_vm._s(_vm.$t('Maps.nextRound'))+\" \")]):_vm._e(),(_vm.isSummaryButtonVisible)?_c('button',{attrs:{\"id\":\"summary-button\"},on:{\"click\":function($event){_vm.dialogSummary = true}}},[_vm._v(\" \"+_vm._s(_vm.$t('Maps.viewSummary'))+\" \")]):_vm._e(),(\n            _vm.$viewport.width < 450 &&\n                !_vm.isGuessButtonClicked &&\n                !_vm.isMakeGuessButtonClicked &&\n                !_vm.isNextButtonVisible\n        )?_c('button',{staticClass:\"primary\",attrs:{\"id\":\"make-guess-button\"},on:{\"click\":_vm.showMap}},[_vm._v(\" \"+_vm._s(_vm.$t('Maps.makeGuess'))+\" \")]):_vm._e(),_c('DialogSummary',{attrs:{\"dialog-summary\":_vm.dialogSummary,\"summary-texts\":_vm.summaryTexts,\"score\":_vm.score,\"player-name\":_vm.playerName,\"points\":_vm.points,\"game\":_vm.game,\"multiplayer\":!!_vm.room,\"mapDetails\":_vm.mapDetails,\"nb-round\":_vm.nbRound},on:{\"finishGame\":_vm.finishGame,\"playAgain\":function($event){return _vm.goToNextRound(true)}}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-dialog',{attrs:{\"value\":_vm.dialogSummary,\"max-width\":\"720\",\"persistent\":\"\",\"fullscreen\":_vm.$viewport.width < 450}},[_c('v-card',{attrs:{\"color\":\"#061422\"}},[_c('v-card-text',{attrs:{\"id\":\"card-text\"}},[(!_vm.multiplayer)?_c('v-row',{attrs:{\"justify\":\"center\"}},[_c('p',{attrs:{\"id\":\"summary-text\"},domProps:{\"innerHTML\":_vm._s(\n                        _vm.$t('DialogSummary.summaryMsgSinglePoints', {\n                            points: _vm.points,\n                        }) +\n                            (_vm.showDistance\n                                ? _vm.$t('DialogSummary.summaryMsgSingleDistance', {\n                                    distance: _vm.score / 1000,\n                                })\n                                : '')\n                    )}})]):_vm._e(),_vm._l((_vm.summaryTexts),function(text,index){return _c('v-row',{key:index,staticClass:\"mt-3\",attrs:{\"justify\":\"center\"}},[_c('span',{attrs:{\"id\":\"summary-text\"}},[(index == 0 || index == 1 || index == 2)?_c('v-icon',{attrs:{\"color\":index == 0\n                                ? '#CCAC00'\n                                : index == 1\n                                    ? '#C0C0C0'\n                                    : '#CC8E34'}},[_vm._v(\"mdi-crown\")]):_vm._e(),_c('span',{domProps:{\"innerHTML\":_vm._s(\n                            _vm.$t('DialogSummary.summaryMsgMultiPoints', {\n                                playerName: text.playerName,\n                                points: text.finalPoints,\n                            }) +\n                                (_vm.showDistance\n                                    ? _vm.$t(\n                                        'DialogSummary.summaryMsgMultiDistance',\n                                        {\n                                            distance: text.finalScore / 1000,\n                                        }\n                                    )\n                                    : '')\n                        )}})],1)])}),_c('v-row',{staticClass:\"mt-8\",attrs:{\"justify\":\"center\"}},[_c('v-btn',{staticClass:\"mt-8\",attrs:{\"id\":\"play-again-button\",\"dark\":\"\",\"color\":\"#43B581\"},on:{\"click\":function($event){return _vm.$emit('finishGame')}}},[_vm._v(\" \"+_vm._s(_vm.$t('DialogSummary.viewDetails'))+\" \")]),(!_vm.multiplayer)?_c('v-btn',{staticClass:\"mt-8\",attrs:{\"id\":\"exit-button\",\"dark\":\"\",\"color\":\"#f44336\"},on:{\"click\":function($event){return _vm.$emit('playAgain')}}},[_vm._v(\" \"+_vm._s(_vm.$t('Maps.playAgain'))+\" \")]):_vm._e()],1)],2)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <v-dialog\n        :value=\"dialogSummary\"\n        max-width=\"720\"\n        persistent\n        :fullscreen=\"$viewport.width < 450\"\n    >\n        <v-card color=\"#061422\">\n            <v-card-text id=\"card-text\">\n                <v-row\n                    v-if=\"!multiplayer\"\n                    justify=\"center\"\n                >\n                    <p\n                        id=\"summary-text\"\n                        v-html=\"\n                            $t('DialogSummary.summaryMsgSinglePoints', {\n                                points,\n                            }) +\n                                (showDistance\n                                    ? $t('DialogSummary.summaryMsgSingleDistance', {\n                                        distance: score / 1000,\n                                    })\n                                    : '')\n                        \"\n                    />\n                </v-row>\n                <v-row\n                    v-for=\"(text, index) in summaryTexts\"\n                    :key=\"index\"\n                    class=\"mt-3\"\n                    justify=\"center\"\n                >\n                    <span id=\"summary-text\">\n                        <v-icon\n                            v-if=\"index == 0 || index == 1 || index == 2\"\n                            :color=\"\n                                index == 0\n                                    ? '#CCAC00'\n                                    : index == 1\n                                        ? '#C0C0C0'\n                                        : '#CC8E34'\n                            \"\n                        >mdi-crown</v-icon>\n                        <span\n                            v-html=\"\n                                $t('DialogSummary.summaryMsgMultiPoints', {\n                                    playerName: text.playerName,\n                                    points: text.finalPoints,\n                                }) +\n                                    (showDistance\n                                        ? $t(\n                                            'DialogSummary.summaryMsgMultiDistance',\n                                            {\n                                                distance: text.finalScore / 1000,\n                                            }\n                                        )\n                                        : '')\n                            \"\n                        />\n                    </span>\n                </v-row>\n                <v-row\n                    class=\"mt-8\"\n                    justify=\"center\"\n                >\n                    <v-btn\n                        id=\"play-again-button\"\n                        class=\"mt-8\"\n                        dark\n                        color=\"#43B581\"\n                        @click=\"$emit('finishGame')\"\n                    >\n                        {{ $t('DialogSummary.viewDetails') }}\n                    </v-btn>\n                    <v-btn\n                        v-if=\"!multiplayer\"\n                        id=\"exit-button\"\n                        class=\"mt-8\"\n                        dark\n                        color=\"#f44336\"\n                        @click=\"$emit('playAgain')\"\n                    >\n                        {{ $t('Maps.playAgain') }}\n                    </v-btn>\n                </v-row>\n            </v-card-text>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\nimport { GAME_MODE } from '../constants';\nexport default {\n    props: [\n        'dialogSummary',\n        'summaryTexts',\n        'playerName',\n        'score',\n        'points',\n        'multiplayer',\n        'game',\n        'mode',\n        'mapDetails',\n        'nbRound',\n    ],\n    computed: {\n        showDistance() {\n            return this.mode === GAME_MODE.CLASSIC;\n        },\n    },\n    watch: {\n        dialogSummary: function (newVal) {\n            if (newVal == true) {\n                this.updateRecord();\n            }\n        },\n    },\n    methods: {\n        updateRecord() {\n            let history = localStorage.getItem('history');\n            if (history == null) {\n                history = [];\n            } else {\n                history = JSON.parse(history);\n            }\n            history.push({\n                ...this.game,\n                score: this.score,\n                points: this.points,\n                rank: this.multiplayer\n                    ? this.summaryTexts.findIndex(\n                          (text) => text.playerName === this.playerName\n                      ) + 1\n                    : undefined,\n                nbRound: this.nbRound,\n                mapDetails: this.mapDetails\n            });\n            localStorage.setItem('history', JSON.stringify(history));\n        },\n        finishGame() {\n            this.$emit('finishGame');\n        },\n    },\n};\n</script>\n\n<style scoped>\n#exit-button,\n#play-again-button {\n    height: 44px;\n    width: 210px;\n    border-radius: 40px;\n    margin: 0 2%;\n}\n\n#card-text {\n    text-align: center;\n    padding: 80px 10% 80px 10%;\n}\n\n#summary-text {\n    font-size: 18px;\n    opacity: 0.9;\n}\n\n@media (max-width: 450px) {\n    #exit-button,\n    #play-again-button {\n        height: 36px;\n    }\n\n    #exit-button {\n        margin-top: 28px;\n        margin-bottom: 24px;\n    }\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DialogSummary.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DialogSummary.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DialogSummary.vue?vue&type=template&id=200a3bd4&scoped=true&\"\nimport script from \"./DialogSummary.vue?vue&type=script&lang=js&\"\nexport * from \"./DialogSummary.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DialogSummary.vue?vue&type=style&index=0&id=200a3bd4&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"200a3bd4\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCardText } from 'vuetify/lib/components/VCard';\nimport { VDialog } from 'vuetify/lib/components/VDialog';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VRow } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VCard,VCardText,VDialog,VIcon,VRow})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (\n        _vm.properties &&\n            typeof _vm.properties === 'object' &&\n            (_vm.properties.title || _vm.properties.description)\n    )?_c('div',{staticClass:\"details-map_container\"},[_c('h2',[_vm._v(\" \"+_vm._s(_vm.properties.title)+\" \")]),_c('p',[_vm._v(\" \"+_vm._s(_vm.properties.description)+\" \")]),(_vm.properties.link && _vm.validURL(_vm.properties.link))?_c('a',{staticClass:\"details-map_link\",attrs:{\"href\":_vm.properties.link,\"target\":\"_blank\"}},[_c('v-icon',{attrs:{\"color\":\"darkGreen\"}},[_vm._v(\"mdi-alert-circle\")]),_vm._v(\" \"+_vm._s(_vm.$t('DetailsMap.moreInfo')))],1):_vm._e()]):_vm._e()}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div\n        v-if=\"\n            properties &&\n                typeof properties === 'object' &&\n                (properties.title || properties.description)\n        \"\n        class=\"details-map_container\"\n    >\n        <h2>\n            {{ properties.title }}\n        </h2>\n        <p>\n            {{ properties.description }}\n        </p>\n        <a\n            v-if=\"properties.link && validURL(properties.link)\"\n            :href=\"properties.link\"\n            target=\"_blank\"\n            class=\"details-map_link\"\n        ><v-icon color=\"darkGreen\">mdi-alert-circle</v-icon>\n            {{ $t('DetailsMap.moreInfo') }}</a>\n    </div>\n</template>\n\n<script>\nimport { validURL } from '@/utils';\nexport default {\n    name: 'DetailsMap',\n    props: ['properties'],\n    methods: {\n        validURL(url) {\n            return validURL(url);\n        },\n    },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.details-map_container {\n    background: #ded3af;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    padding: 1% 2%;\n    color: black;\n    position: relative;\n    .details-map_link {\n        right: 0.6rem;\n        position: absolute;\n        bottom: 0.4rem;\n        text-decoration: none;\n        font-size: 0.9rem;\n        vertical-align: middle;\n        .v-icon {\n            font-size: 1.2rem;\n        }\n    }\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DetailsMap.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DetailsMap.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DetailsMap.vue?vue&type=template&id=4d0af0f4&scoped=true&\"\nimport script from \"./DetailsMap.vue?vue&type=script&lang=js&\"\nexport * from \"./DetailsMap.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DetailsMap.vue?vue&type=style&index=0&id=4d0af0f4&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4d0af0f4\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VIcon } from 'vuetify/lib/components/VIcon';\ninstallComponents(component, {VIcon})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"map\"}},[_c('GmapMap',{ref:\"mapRef\",attrs:{\"id\":\"mapClassic\",\"center\":{ lat: 37.86926, lng: -122.254811 },\"zoom\":1,\"map-type-id\":\"roadmap\",\"options\":{\n            fullscreenControl: false,\n            mapTypeControl: false,\n            streetViewControl: false,\n            draggableCursor: 'crosshair',\n            clickableIcons: false,\n            styles: _vm.$vuetify.theme.dark ? _vm.$vuetify.theme.themes.dark.gmap : _vm.$vuetify.theme.themes.light.gmap\n        }}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export const MapMixin = {\r\n   \r\n    props: ['bbox'],\r\n    watch: {\r\n        bbox() {\r\n            this.centerOnBbox();\r\n        },\r\n    },\r\n    methods: {\r\n        centerOnBbox() {\r\n            if (this.map) {\r\n                if (this.bbox) {\r\n                    this.map.fitBounds({\r\n                        east: this.bbox[2],\r\n                        north: this.bbox[3],\r\n                        south: this.bbox[1],\r\n                        west: this.bbox[0],\r\n                    });\r\n                } else {\r\n                    this.map.setZoom(0);\r\n                    this.map.setCenter({lat: 0, lng: 0});\r\n                }\r\n            }\r\n        },        \r\n        drawPolyline() {},\r\n        removePolylines() {},\r\n    }\r\n};\r\n\r\nexport default MapMixin;\r\n","<template>\n    <div id=\"map\">\n        <GmapMap\n            id=\"mapClassic\"\n            ref=\"mapRef\"\n            :center=\"{ lat: 37.86926, lng: -122.254811 }\"\n            :zoom=\"1\"\n            map-type-id=\"roadmap\"\n            :options=\"{\n                fullscreenControl: false,\n                mapTypeControl: false,\n                streetViewControl: false,\n                draggableCursor: 'crosshair',\n                clickableIcons: false,\n                styles: $vuetify.theme.dark ? $vuetify.theme.themes.dark.gmap : $vuetify.theme.themes.light.gmap\n            }\"\n        />\n    </div>\n</template>\n<script>\nimport { STROKE_COLORS } from '../../constants';\nimport MapMixin from './mixins/MapMixin';\n\nexport default {\n    name: 'Map',\n    mixins: [MapMixin],\n    data() {\n        return {\n            map: null,\n            marker: [],\n            markers: [],\n            polylines: [],\n            strokeColors: STROKE_COLORS,\n        };\n    },\n    async mounted() {\n        await this.$gmapApiPromiseLazy();\n        this.$refs.mapRef.$mapPromise.then((map) => {\n            this.map = map;\n\n            this.centerOnBbox();\n        });\n    },\n    methods: {\n        putMarker(position, isRandomLocation, label) {\n            let info = {};\n            if (isRandomLocation) {\n                info = {\n                    icon: {\n                        url: window.location.origin + '/img/icons/favicon-16x16.png',\n                        anchor: new google.maps.Point(8,8),\n                    }\n                };\n            }\n            if (label) {\n                info = {\n                    label,\n                };\n            }\n            const marker = new google.maps.Marker({\n                ...info,\n                position: position,\n                map: this.map,\n            });\n            this.markers.push(marker);\n        },\n        removeMarkers() {\n            for (var i = 0; i < this.markers.length; i++) {\n                this.markers[i].setMap(null);\n            }\n            this.markers = [];\n        },\n        setInfoWindow(playerName, distance, points, endGame = false) {\n            let dataToDisplay = '';\n            if (playerName !== null)\n                dataToDisplay += '<b>' + playerName + '</b>' + ' : <br/>';\n\n            if (distance < 1000) {\n                dataToDisplay +=\n                    '<b>' +\n                    this.$t('Maps.infoWindow.Distance') +\n                    ': </b>' +\n                    new Intl.NumberFormat(this.$i18n.locale, { style: \"unit\", unit:\"meter\" }).format(distance);\n            } else {\n                dataToDisplay +=\n                    '<b>' +\n                    this.$t('Maps.infoWindow.Distance') +\n                    ': </b>' +\n                    new Intl.NumberFormat(this.$i18n.locale, { style: \"unit\", unit:\"kilometer\" }).format(distance / 1000);\n            }\n\n            dataToDisplay +=\n                '<br/><b>' +\n                this.$t('Maps.infoWindow.Points') +\n                ': </b>' +\n                points;\n\n            const infoWindow = new google.maps.InfoWindow({\n                content: dataToDisplay,\n            });\n            infoWindow.open(\n                this.map,\n                this.markers[\n                    playerName || endGame ? this.markers.length - 1 : 0\n                ]\n            );\n        },\n        drawPolyline(selectedLatLng, i = 0, randomLatLng) {\n            const lineSymbol = {\n                path: \"M 0,-1 0,1\",\n                strokeOpacity: 1,\n                scale: 2,\n            };\n            const polyline = new google.maps.Polyline({\n                path: [selectedLatLng, randomLatLng],\n                strokeOpacity: 0,\n                strokeColor: this.strokeColors[i % this.strokeColors.length],\n                icons: [\n                    {\n                        icon: lineSymbol,\n                        offset: \"0\",\n                        repeat: \"10px\",\n                    },\n                ],\n            });\n            polyline.setMap(this.map);\n            this.polylines.push(polyline);\n        },\n        removePolylines() {\n            for (let i = 0; i < this.polylines.length; i++) {\n                this.polylines[i].setMap(null);\n            }\n        },\n        startNextRound() {\n            this.$refs.mapRef.$mapPromise.then(() => {\n                this.map.addListener('click', (e) => {\n                    // Clear the previous marker when clicking the map\n                    this.removeMarkers();\n\n                    // Show the new marker\n                    this.putMarker(e.latLng);\n\n                    // Save latLng\n                    this.$emit('setSeletedPos', e.latLng);\n                });\n                this.centerOnBbox();\n            });\n        },\n        removeListener() {\n            google.maps.event.clearListeners(this.map, 'click');\n        },\n        fitBounds() {\n            const bounds = new google.maps.LatLngBounds();\n\n            for (let i = 0; i < this.markers.length; i++) {\n                if (this.markers[i].getVisible()) {\n                    bounds.extend(this.markers[i].getPosition());\n                }\n            }\n\n            this.map.fitBounds(bounds);\n        },\n    },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#mapClassic {\n    width: 100%;\n    height: 100%;\n    background-color: var(--v-gmapBg-base);\n}\n\n.gm-style-iw {\n  color: black;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=4395e0c1&scoped=true&\"\nimport script from \"./Map.vue?vue&type=script&lang=js&\"\nexport * from \"./Map.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Map.vue?vue&type=style&index=0&id=4395e0c1&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4395e0c1\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"map-areas\",attrs:{\"id\":\"map\"}},[_c('div',{staticClass:\"map-content\"},[(_vm.polygonSelect || _vm.areaName)?_c('div',{staticClass:\"map-label\",attrs:{\"title\":_vm.areaName}},[(_vm.showFlag)?_c('FlagIcon',{attrs:{\"size\":\"big\",\"rounded\":\"\",\"iso-name\":_vm.areaRandom || _vm.areaNameSelect}}):_vm._e(),_c('span',{staticClass:\"map-label__country-name\",class:{\n                    beige: !_vm.areaRandom,\n                    green: !!_vm.areaRandom,\n                    'white--text': !!_vm.areaRandom,\n                    large: !_vm.showFlag,\n                }},[_vm._v(\" \"+_vm._s(_vm.areaName)+\" \")])],1):_vm._e(),_c('GmapMap',{ref:\"mapRef\",attrs:{\"id\":\"mapAreas\",\"center\":{ lat: 37.86926, lng: -122.254811 },\"zoom\":1,\"map-type-id\":\"roadmap\",\"options\":{\n                fullscreenControl: false,\n                mapTypeControl: false,\n                streetViewControl: false,\n                draggableCursor: 'crosshair',\n                clickableIcons: false,\n                styles: _vm.$vuetify.theme.dark ? _vm.$vuetify.theme.themes.dark.gmap : _vm.$vuetify.theme.themes.light.gmap,\n            }}})],1),(_vm.infoWindowDatas.length > 0)?_c('div',{staticClass:\"result-panel\"},_vm._l((_vm.infoWindowDatas),function(info){return _c('div',{key:info.playerName,staticClass:\"result-panel__item\",class:{ flag: _vm.showFlag }},[(_vm.showFlag)?_c('FlagIcon',{attrs:{\"iso-name\":info.area}}):_vm._e(),_c('b',[_vm._v(_vm._s(info.playerName))]),(!_vm.showFlag)?_c('span',[_vm._v(_vm._s(info.area))]):_vm._e()],1)}),0):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div id=\"map\" class=\"map-areas\">\n        <div class=\"map-content\">\n            <div\n                v-if=\"polygonSelect || areaName\"\n                class=\"map-label\"\n                :title=\"areaName\"\n            >\n                <FlagIcon\n                    v-if=\"showFlag\"\n                    size=\"big\"\n                    rounded\n                    :iso-name=\"areaRandom || areaNameSelect\"\n                />\n                <span\n                    class=\"map-label__country-name\"\n                    :class=\"{\n                        beige: !areaRandom,\n                        green: !!areaRandom,\n                        'white--text': !!areaRandom,\n                        large: !showFlag,\n                    }\"\n                >\n                    {{ areaName }}\n                </span>\n            </div>\n            <GmapMap\n                id=\"mapAreas\"\n                ref=\"mapRef\"\n                :center=\"{ lat: 37.86926, lng: -122.254811 }\"\n                :zoom=\"1\"\n                map-type-id=\"roadmap\"\n                :options=\"{\n                    fullscreenControl: false,\n                    mapTypeControl: false,\n                    streetViewControl: false,\n                    draggableCursor: 'crosshair',\n                    clickableIcons: false,\n                    styles: $vuetify.theme.dark ? $vuetify.theme.themes.dark.gmap : $vuetify.theme.themes.light.gmap,\n                }\"\n            />\n        </div>\n        <div v-if=\"infoWindowDatas.length > 0\" class=\"result-panel\">\n            <div\n                v-for=\"info in infoWindowDatas\"\n                :key=\"info.playerName\"\n                class=\"result-panel__item\"\n                :class=\"{ flag: showFlag }\"\n            >\n                <FlagIcon v-if=\"showFlag\" :iso-name=\"info.area\" />\n                <b>{{ info.playerName }}</b>\n                <span v-if=\"!showFlag\">{{ info.area }}</span>\n            </div>\n        </div>\n    </div>\n</template>\n<script type=\"text/javascript\">\nimport FlagIcon from '@/components/shared/FlagIcon';\nimport { mapActions, mapGetters } from 'vuex';\nimport MapMixin from './mixins/MapMixin';\n\nexport default {\n    mixins: [MapMixin],\n    components: {\n        FlagIcon,\n    },\n    props: {\n        area: {\n            type: String,\n        },\n        areasGeoJsonUrl: String,\n        pathKey: {\n            type: String,\n            default: 'iso_a2',\n        },\n        showFlag: Boolean,\n    },\n    data() {\n        return {\n            map: null,\n            polygonSelect: null,\n            areas: {},\n            markers: [],\n            allowSelect: true,\n            areaRandom: null,\n            randomPos: null,\n            infoWindowDatas: [],\n        };\n    },\n    computed: {\n        ...mapGetters(['areasJson']),\n        areaName() {\n            if (this.showFlag && (this.areaRandom || this.polygonSelect)) {\n                return this.$countryNameLocale(\n                    this.areaRandom || this.areaNameSelect\n                );\n            } else {\n                return this.areaRandom || this.areaNameSelect;\n            }\n        },\n        areaNameSelect() {\n            return this.polygonSelect\n                ? this.polygonSelect\n                      .getFeatureById('feature')\n                      .getProperty(this.pathKey)\n                : undefined;\n        },\n    },\n    async mounted() {\n        await this.loadAreas(this.areasGeoJsonUrl);\n        await this.$gmapApiPromiseLazy();\n        this.$refs.mapRef.$mapPromise.then((map) => {\n            this.map = map;\n            this.areasJson.features.forEach((c) => {\n                if (Array.isArray(c.geometry.coordinates)) {\n                    const p = new google.maps.Data({\n                        style: {\n                            strokeOpacity: 0,\n                            fillOpacity: 0,\n                            strokeWeight: 2,\n                        },\n                    });\n                    c.id = 'feature';\n                    p.addGeoJson(c);\n\n                    p.setMap(this.map);\n                    p.addListener('click', () => {\n                        if (!this.allowSelect) {\n                            return;\n                        }\n                        if (this.polygonSelect) {\n                            this.polygonSelect.setStyle({\n                                strokeOpacity: 0,\n                                fillOpacity: 0,\n                            });\n                        }\n                        if (Object.is(p, this.polygonSelect)) {\n                            this.polygonSelect = null;\n                            this.$emit('setSeletedPos', null);\n                        } else {\n                            p.setStyle({\n                                strokeOpacity: 0.8,\n                                fillOpacity: 0.3,\n                                strokeColor: '#1E3A8A',\n                                fillColor: '#1D4ED8',\n                            });\n\n                            this.polygonSelect = p;\n                            this.$emit(\n                                'setSeletedPos',\n                                p\n                                    .getFeatureById('feature')\n                                    .getProperty(this.pathKey)\n                            );\n                        }\n                    });\n                    this.areas[c.properties[this.pathKey]] = p;\n                }\n            });\n            this.centerOnBbox();\n        });\n    },\n    methods: {\n        ...mapActions(['loadAreas']),\n        putMarker(pos, isRandomLocation, area) {\n            const areaName = isRandomLocation ? area || this.area : pos;\n            if (isRandomLocation) {\n                this.areaRandom = this.area;\n                this.randomPos = new google.maps.Marker({\n                    position: pos,\n                    map: this.map,\n                });\n            }\n            if (this.areas[areaName]) {\n                this.areas[areaName].setStyle({\n                    fillOpacity: 0.3,\n                    strokeOpacity: 0.8,\n                    fillColor: isRandomLocation ? '#52DA42' : '#FF4081',\n                    strokeColor: isRandomLocation ? '#16A910' : '#FF4081',\n                });\n                this.markers.push(areaName);\n            }\n        },\n        removeMarkers() {\n            this.markers.forEach((areaName) => {\n                this.areas[areaName].setStyle({\n                    strokeOpacity: 0,\n                    fillOpacity: 0,\n                });\n            });\n            if (this.polygonSelect) {\n                this.polygonSelect.setStyle({\n                    strokeOpacity: 0,\n                    fillOpacity: 0,\n                });\n            }\n            if (this.randomPos) {\n                this.randomPos.setMap(null);\n                this.randomPos = null;\n            }\n            this.markers = [];\n            this.infoWindowDatas = [];\n        },\n        setInfoWindow(playerName, _distance, _points, _endGame, area) {\n            if (playerName) this.infoWindowDatas.push({ playerName, area });\n        },\n        startNextRound() {\n            if (this.polygonSelect) {\n                this.polygonSelect.setStyle({\n                    strokeOpacity: 0,\n                    fillOpacity: 0,\n                });\n            }\n            this.polygonSelect = null;\n            this.areaRandom = null;\n            this.allowSelect = true;\n\n            this.centerOnBbox();\n        },\n        removeListener() {\n            this.allowSelect = false;\n        },\n        fitBounds() {\n            if (this.bbox) {\n                this.centerOnBbox();\n            } else {\n                this.map.setZoom(2);\n            }\n        },\n    },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#map {\n    overflow: hidden;\n    display: flex;\n    .result-panel {\n        height: 100%;\n        padding: 2%;\n        background: var(--v-card-base);\n        display: flex;\n        flex-direction: column;\n        width: 30%;\n        .result-panel__item {\n            display: grid;\n            grid-template-rows: auto auto;\n\n            &.flag {\n                display: inline-grid;\n                grid-template-columns: 42px auto;\n                grid-column-gap: 5px;\n                align-items: center;\n            }\n        }\n    }\n    .map-content {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        #mapAreas {\n            width: 100%;\n            height: 100%;\n        }\n        .map-label {\n            z-index: 5;\n            position: absolute;\n            top: 1rem;\n            left: 1rem;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n\n            .map-label__country-name {\n                &.large {\n                    width: fit-content;\n                }\n                width: 7rem;\n                text-align: center;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                overflow: hidden;\n                background: var(--v-primary-base);\n                margin-top: 0.2rem;\n                padding: 0.1% 5%;\n                border-radius: 5px;\n                font-weight: 500;\n            }\n        }\n    }\n}\n@media (max-width: 450px) {\n    #map.map-areas {\n        display: grid !important;\n        grid-auto-rows: auto 30vw;\n        .result-panel {\n            width: 100%;\n            overflow-y: auto;\n        }\n    }\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MapAreas.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MapAreas.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MapAreas.vue?vue&type=template&id=30884500&scoped=true&\"\nimport script from \"./MapAreas.vue?vue&type=script&lang=js&\"\nexport * from \"./MapAreas.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MapAreas.vue?vue&type=style&index=0&id=30884500&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"30884500\",\n  null\n  \n)\n\nexport default component.exports","import { SCORE_MODE } from '../../constants';\n\nexport function getScore(distance, difficulty, time, mode) {\n    switch (mode) {\n        case SCORE_MODE.TIME:\n            return Math.round(\n                getScoreNormal(distance, difficulty) * Math.exp(-time / 6000000)\n            );\n\n        default:\n            return getScoreNormal(distance, difficulty);\n    }\n}\n\nfunction getScoreNormal(distance, difficulty) {\n    if (distance < 50) {\n        return 5000;\n    } else {\n        const point = Math.round(\n            5000 * Math.exp(-(distance / 1000 / difficulty))\n        );\n\n        if (point > 5000) {\n            return 5000;\n        } else if (point < 0) {\n            return 0;\n        }\n        return point;\n    }\n}\n","<template>\n    <div\n        id=\"container-map\"\n        :class=\"[\n            ($viewport.width >= 450 && (activeMap || pinActive)) ||\n                isMakeGuessButtonClicked ||\n                isNextButtonVisible\n                ? 'container-map--active'\n                : '',\n            printMapFull ? 'container-map--full' : '',\n            `container-map--size-${size}`,\n        ]\"\n        v-on=\"\n            $viewport.width >= 450 // Only on tablet and desktop Issue #104\n                ? {\n                    mouseover: () => {\n                        activeMap = true;\n                    },\n                    mouseleave: () => {\n                        activeMap = false;\n                    },\n                }\n                : {}\n        \"\n    >\n        <div class=\"container-map_details\">\n            <DetailsMap\n                v-if=\"printMapFull\"\n                :properties=\"randomFeatureProperties\"\n            />\n        </div>\n\n        <div class=\"container-map_controls\">\n            <div class=\"container-map_btns\">\n                <v-btn fab x-small @click=\"showNotepad\">\n                    <v-icon dark> mdi-file-document-edit </v-icon>\n                </v-btn>\n\n                <v-btn\n                    id=\"btnDown\"\n                    fab\n                    x-small\n                    :disabled=\"size < 2\"\n                    @click=\"size--\"\n                >\n                    <v-icon dark> mdi-arrow-bottom-left </v-icon>\n                </v-btn>\n\n                <v-btn\n                    id=\"btnUp\"\n                    fab\n                    x-small\n                    :disabled=\"size > 3\"\n                    @click=\"size++\"\n                >\n                    <v-icon dark> mdi-arrow-top-right </v-icon>\n                </v-btn>\n\n                <v-btn id=\"btnPin\" fab x-small @click=\"pinActive = !pinActive\">\n                    <v-icon dark> mdi-pin{{ pinActive ? '-off' : '' }} </v-icon>\n                </v-btn>\n            </div>\n        </div>\n        <v-btn\n            v-if=\"\n                $viewport.width < 450 &&\n                    !isGuessButtonClicked &&\n                    isMakeGuessButtonClicked\n            \"\n            id=\"hide-map-button\"\n            fab\n            x-small\n            color=\"red\"\n            @click=\"hideMap\"\n        >\n            <v-icon color=\"white\"> mdi-close </v-icon>\n        </v-btn>\n        <Map\n            v-if=\"this.mode === 'classic'\"\n            id=\"map\"\n            ref=\"map\"\n            :bbox=\"bbox\"\n            @setSeletedPos=\"setSeletedPos\"\n        />\n        <MapAreas\n            v-if=\"this.mode !== 'classic'\"\n            id=\"map\"\n            ref=\"map\"\n            :area=\"area\"\n            :areasGeoJsonUrl=\"areasGeoJsonUrl\"\n            :pathKey=\"pathKey\"\n            :bbox=\"bbox\"\n            :showFlag=\"this.mode === 'country'\"\n            @setSeletedPos=\"setSeletedPos\"\n        />\n        <textarea\n            class=\"container-map_notepad\"\n            v-show=\"isNotepadVisible\"\n            spellcheck=\"false\"\n            v-if=\"!printMapFull\"\n            ref=\"refNotepad\"\n        />\n        <button\n            v-if=\"\n                !isNextButtonVisible &&\n                    !isSummaryButtonVisible &&\n                    ($viewport.width > 450 || isMakeGuessButtonClicked)\n            \"\n            id=\"guess-button\"\n            :disabled=\"\n                randomLatLng == null ||\n                    selectedPos == null ||\n                    isGuessButtonClicked ||\n                    (!!this.room && !isReady)\n            \"\n            @click=\"selectLocation\"\n        >\n            {{ $t('Maps.guess') }}\n        </button>\n        <button\n            v-if=\"isNextButtonVisible\"\n            id=\"next-button\"\n            :disabled=\"!isNextButtonEnabled\"\n            :style=\"{\n                backgroundColor: isNextButtonEnabled ? '#F44336' : '#B71C1C',\n            }\"\n            @click=\"goToNextRound(false)\"\n        >\n            {{ $t('Maps.nextRound') }}\n        </button>\n        <button\n            v-if=\"isSummaryButtonVisible\"\n            id=\"summary-button\"\n            @click=\"dialogSummary = true\"\n        >\n            {{ $t('Maps.viewSummary') }}\n        </button>\n\n        <button\n            v-if=\"\n                $viewport.width < 450 &&\n                    !isGuessButtonClicked &&\n                    !isMakeGuessButtonClicked &&\n                    !isNextButtonVisible\n            \"\n            id=\"make-guess-button\"\n            class=\"primary\"\n            @click=\"showMap\"\n        >\n            {{ $t('Maps.makeGuess') }}\n        </button>\n        <DialogSummary\n            :dialog-summary=\"dialogSummary\"\n            :summary-texts=\"summaryTexts\"\n            :score=\"score\"\n            :player-name=\"playerName\"\n            :points=\"points\"\n            :game=\"game\"\n            :multiplayer=\"!!room\"\n            :mapDetails=\"mapDetails\"\n            :nb-round=\"nbRound\"\n            @finishGame=\"finishGame\"\n            @playAgain=\"goToNextRound(true)\"\n        />\n    </div>\n</template>\n\n<script>\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport DialogSummary from '@/components/DialogSummary';\nimport DetailsMap from '@/components/game/DetailsMap';\nimport Map from '@/components/map/Map';\nimport MapAreas from '@/components/map/MapAreas';\nimport { GAME_MODE } from '../constants';\nimport { getSelectedPos } from '../utils';\nimport { getScore } from '../utils/game/score';\n\nexport default {\n    components: {\n        DialogSummary,\n        DetailsMap,\n        Map,\n        MapAreas,\n    },\n    props: [\n        'randomLatLng',\n        'randomFeatureProperties',\n        'roomName',\n        'playerNumber',\n        'playerName',\n        'isReady',\n        'round',\n        'score',\n        'points',\n        'timeLimitation',\n        'difficulty',\n        'bbox',\n        'mode',\n        'area',\n        'timeAttack',\n        'nbRound',\n        'countdown',\n        'scoreMode',\n        'areasGeoJsonUrl',\n        'pathKey',\n        'mapDetails',\n    ],\n    data() {\n        return {\n            summaryTexts: [],\n            room: null,\n            selectedPos: null,\n            distance: null,\n            point: null,\n            isGuessButtonClicked: false,\n            isMakeGuessButtonClicked: false,\n            isSelected: false,\n            isNextStreetViewReady: false,\n            isNextButtonVisible: false,\n            isSummaryButtonVisible: false,\n            dialogSummary: false,\n            activeMap: false,\n            size: 2,\n            isNotepadVisible: false,\n            pinActive: localStorage.getItem('pinActive') === 'true',\n            printMapFull: false,\n            countdownStarted: false,\n            game: {\n                multiplayer: !!this.roomName,\n                date: new Date(),\n                rounds: [],\n            },\n            startTime: null,\n        };\n    },\n    computed: {\n        isNextButtonEnabled() {\n            if (this.playerNumber == 1 || !this.room) {\n                return true;\n            } else {\n                if (this.isNextStreetViewReady) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        },\n    },\n    watch: {\n      pinActive() {\n        localStorage.setItem('pinActive', this.pinActive);\n      }\n    },\n    async mounted() {\n        await this.$gmapApiPromiseLazy();\n        this.game.timeLimitation = this.timeLimitation;\n        this.game.difficulty = this.difficulty;\n        this.game.mode = this.mode;\n        this.game.timeAttack = this.timeAttack;\n        this.game.playerName = this.playerName;\n        let size = 0;\n\n        if (this.roomName) {\n            this.room = firebase.database().ref(this.roomName);\n\n            this.room.on('value', (snapshot) => {\n                // Check if the room is already removed\n                if (snapshot.hasChild('active')) {\n                    size = snapshot.child('size').val();\n                    if (size === 1) {\n                        this.room.onDisconnect().remove();\n                    } else {\n                        this.room.onDisconnect().update({ size: size - 1 });\n                    }\n                    if (\n                        // If Time Attack and 1st true guess finish round\n                        (this.timeAttack &&\n                            this.countdown === 0 &&\n                            snapshot.child('guess').numChildren() >= 1 &&\n                            snapshot\n                                .child('guess')\n                                .forEach(\n                                    (guess) =>\n                                        guess.child('area').val() === this.area\n                                )) ||\n                        // Allow players to move on to the next round when every players guess locations\n                        snapshot.child('guess').numChildren() === size\n                    ) {\n                        this.game.timeLimitation = this.timeLimitation;\n                        this.isNextStreetViewReady = false;\n\n                        this.$emit('showResult');\n\n                        // Put markers and draw polylines on the map\n                        let i = 0;\n                        let players = {};\n                        snapshot.child('guess').forEach((childSnapshot) => {\n                            let posGuess;\n                            if (this.mode === GAME_MODE.CLASSIC) {\n                                const lat = childSnapshot\n                                    .child('latitude')\n                                    .val();\n                                const lng = childSnapshot\n                                    .child('longitude')\n                                    .val();\n                                posGuess = new google.maps.LatLng({\n                                    lat: lat,\n                                    lng: lng,\n                                });\n                            } else {\n                                posGuess = childSnapshot.child('area').val();\n                            }\n\n                            const playerName = snapshot\n                                .child('playerName')\n                                .child(childSnapshot.key)\n                                .val();\n                            const roundValues = snapshot\n                                .child('round' + this.round + '/' + childSnapshot.key)\n                                .exportVal();\n\n                            const { points, distance } = roundValues;\n\n                            players[playerName] = {\n                                ...roundValues,\n                                guess: posGuess,\n                            };\n                            this.$refs.map.drawPolyline(\n                                posGuess,\n                                i,\n                                this.randomLatLng\n                            );\n                            this.$refs.map.putMarker(\n                                posGuess,\n                                false,\n                                playerName && playerName.length > 0\n                                    ? playerName[0].toUpperCase()\n                                    : ''\n                            );\n                            this.$refs.map.setInfoWindow(\n                                playerName,\n                                distance,\n                                points,\n                                false,\n                                posGuess\n                            );\n                            i++;\n                        });\n                        this.$refs.map.fitBounds();\n                        this.game.rounds.push({\n                            position: {\n                                ...this.randomLatLng.toJSON(),\n                                area: this.area,\n                            },\n                            players,\n                        });\n                        this.$refs.map.putMarker(this.randomLatLng, true);\n\n                        this.printMapFull = true;\n                        // Remove guess node every time the round is done\n                        this.room.child('guess').remove();\n\n                        if (this.round >= this.nbRound) {\n                            // Show summary button\n                            snapshot\n                                .child('finalPoints')\n                                .forEach((childSnapshot) => {\n                                    const playerName = snapshot\n                                        .child('playerName')\n                                        .child(childSnapshot.key)\n                                        .val();\n                                    const finalScore = snapshot\n                                        .child('finalScore')\n                                        .child(childSnapshot.key)\n                                        .val();\n                                    const finalPoints = childSnapshot.val();\n                                    this.summaryTexts.push({\n                                        playerName: playerName,\n                                        finalScore: finalScore,\n                                        finalPoints: finalPoints,\n                                    });\n                                });\n\n                            this.summaryTexts.sort(\n                                (a, b) =>\n                                    parseInt(b.finalPoints) -\n                                    parseInt(a.finalPoints)\n                            );\n\n                            this.isSummaryButtonVisible = true;\n                        } else {\n                            // Show next button\n                            this.isNextButtonVisible = true;\n                        }\n                    }\n\n                    // Allow other players to move on to the next round when the next street view is set\n                    if (\n                        snapshot.child('streetView').numChildren() ==\n                        this.round + 1\n                    ) {\n                        this.isNextStreetViewReady = true;\n                    }\n\n                    if (\n                        !this.countdownStarted &&\n                        !this.printMapFull &&\n                        this.countdown > 0 &&\n                        snapshot.child('guess').numChildren() >= 1\n                    ) {\n                        this.$parent.initTimer(this.countdown, true);\n\n                        this.countdownStarted = true;\n                    }\n                }\n            });\n        }\n    },\n    methods: {\n        setSeletedPos(pos) {\n            this.selectedPos = pos;\n        },\n        showMap() {\n            this.isMakeGuessButtonClicked = true;\n        },\n        hideMap() {\n            this.isMakeGuessButtonClicked = false;\n        },\n        showNotepad() {\n            this.isNotepadVisible = !this.isNotepadVisible;\n            if (this.isNotepadVisible) {\n                setTimeout(() => {\n                    this.$refs.refNotepad.focus();\n                });\n            }\n        },\n        selectLocation() {\n            this.calculateDistance();\n\n            if (this.room) {\n                // Save the selected location into database\n                // So that it uses for putting the markers and polylines\n                this.room\n                    .child('guess/player' + this.playerNumber)\n                    .set(getSelectedPos(this.selectedPos, this.mode));\n            } else {\n                // Put the marker on the random location\n                this.$refs.map.putMarker(this.randomLatLng, true);\n                // Show the polyline\n                this.$refs.map.drawPolyline(\n                    this.selectedPos,\n                    1,\n                    this.randomLatLng\n                );\n\n                this.$refs.map.setInfoWindow(\n                    null,\n                    this.distance,\n                    this.point,\n                    false,\n                    this.setSeletedPos\n                );\n                this.printMapFull = true;\n                this.$refs.map.fitBounds();\n                if (this.round >= this.nbRound) {\n                    this.isSummaryButtonVisible = true;\n                } else {\n                    this.isNextButtonVisible = true;\n                }\n                this.$emit('showResult');\n            }\n            // Clear the event\n            this.$refs.map.removeListener();\n\n            // Diable guess button and opacity of the map\n            this.isGuessButtonClicked = true;\n            this.isSelected = true;\n\n            // Turn off the flag before the next button appears\n            this.isNextStreetViewReady = false;\n        },\n        selectRandomLocation(randomLatLng) {\n            if (this.selectedPos === null) {\n                // set a random location if the player didn't select in time\n                this.selectedPos = randomLatLng;\n                this.$refs.map.removeMarkers();\n                this.$refs.map.putMarker(this.selectedPos);\n            }\n            this.selectLocation();\n        },\n        resetLocation() {\n            this.$emit('resetLocation');\n        },\n        calculateDistance() {\n            const timePassed = new Date() - this.startTime;\n            if (\n                [GAME_MODE.COUNTRY, GAME_MODE.CUSTOM_AREA].includes(this.mode)\n            ) {\n                this.point = +(this.area === this.selectedPos);\n                this.distance = null;\n            } else {\n                this.distance = Math.floor(\n                    google.maps.geometry.spherical.computeDistanceBetween(\n                        this.randomLatLng,\n                        this.selectedPos\n                    )\n                );\n\n                this.point = getScore(\n                    this.distance,\n                    this.difficulty,\n                    timePassed,\n                    this.scoreMode\n                );\n            }\n            // Save the distance into firebase\n            if (this.room) {\n                this.room\n                    .child('round' + this.round + '/player' + this.playerNumber)\n                    .set({\n                        ...getSelectedPos(this.selectedPos, this.mode),\n                        distance: this.distance,\n                        points: this.point,\n                        timePassed,\n                    });\n            } else {\n                this.game.rounds.push({\n                    guess: this.selectedPos,\n                    area: this.area,\n                    position: this.randomLatLng,\n                    distance: this.distance,\n                    points: this.point,\n                    timePassed,\n                });\n            }\n\n            this.$emit('calculateDistance', this.distance, this.point);\n        },\n        startNextRound() {\n            this.$refs.map.startNextRound();\n            this.startTime = new Date();\n        },\n        goToNextRound(isPlayAgain = false) {\n            if (isPlayAgain) {\n                this.dialogSummary = false;\n                this.isSummaryButtonVisible = false;\n            }\n\n            // Reset\n            this.selectedPos = null;\n            this.isGuessButtonClicked = false;\n            this.isSelected = false;\n            this.isNextButtonVisible = false;\n            this.countdownStarted = false;\n            this.isNotepadVisible = false;\n\n            if (this.$viewport.width < 450) {\n                // Hide the map if the player is on mobile\n                this.hideMap();\n            }\n\n            this.printMapFull = false;\n            this.$refs.map.removeMarkers();\n            this.$refs.map.removePolylines();\n            this.$refs.map.centerOnBbox();\n\n            // Replace the streetview with the next one\n            this.$emit('goToNextRound', isPlayAgain);\n        },\n        finishGame() {\n            this.dialogSummary = false;\n            if (this.room)\n                this.room\n                    .child('isGameDone/player' + this.playerNumber)\n                    .set(true);\n            this.$emit('finishGame');\n        },\n    },\n};\n</script>\n\n<style scoped lang=\"scss\">\n#container-map {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    bottom: 5px;\n    left: 10px;\n    z-index: 3;\n    opacity: 0.7;\n    width: var(--width);\n    height: var(--height);\n    z-index: 3;\n    --aspect-ratio: 1.25;\n    --inactive-width: 16vw;\n    --active-width: 30vw;\n    --active-height: calc(var(--active-width) / var(--aspect-ratio));\n    --inactive-height: calc(var(--inactive-width) / var(--aspect-ratio));\n    --height: var(--inactive-height);\n    --width: var(--inactive-width);\n    max-width: 100%;\n    max-height: calc(100% - 150px);\n    transition: 0.3s;\n    #map {\n        width: 100%;\n        height: 100%;\n    }\n\n    &.container-map--size-1 {\n        --active-width: 16vw;\n    }\n    &.container-map--size-3 {\n        --active-width: 45vw;\n    }\n    &.container-map--size-4 {\n        --active-width: 65vw;\n    }\n    &.container-map--active {\n        opacity: 1;\n        --width: var(--active-width);\n        --height: var(--active-height);\n        .container-map_controls {\n            display: flex;\n        }\n    }\n    &.container-map--full {\n        transition: none;\n        opacity: 1;\n        --active-width: 85vw;\n        --inactive-width: 85vw;\n        position: relative;\n        margin: auto;\n        .container-map_controls {\n            display: none;\n        }\n        .container-map_details {\n            display: block;\n        }\n    }\n\n    .container-map_details {\n        display: none;\n    }\n    .container-map_controls {\n        .container-map_btns {\n            background-color: rgba(33, 33, 33);\n            padding: 0.2rem;\n            border-top-left-radius: 5%;\n            border-top-right-radius: 5%;\n        }\n        button {\n            width: 1.5rem;\n            height: 1.5rem;\n            margin: 0 0.5rem;\n        }\n        display: flex;\n        flex-direction: row-reverse;\n    }\n\n    .container-map_notepad {\n        position: absolute;\n        background-color: var(--v-notepad-base);\n        resize: none;\n        left: var(--width);\n        margin-left: 10px;\n        transition: 0.3s;\n        width: 300px;\n        height: calc(100% - 74px);\n        top: 30px;\n        border-radius: 3px;\n        outline: none;\n        padding: 5px;\n        box-shadow: 0px 2px 8px 0px rgba(99, 99, 99, 0.2);\n    }\n\n    .theme--dark & .container-map_notepad {\n        color: #fff;\n    }\n    .theme--light & .container-map_notepad {\n        color: #000;\n    }\n}\n\n#make-guess-button,\n#guess-button,\n#next-button,\n#summary-button,\n#reset-button,\n#play-again-button {\n    border: none;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    opacity: 0.8;\n    color: white;\n    font-size: 16px;\n    text-decoration: none;\n    text-align: center;\n    padding: 10px 0;\n    z-index: 999;\n}\n\n\n#reset-button {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    width: 25%;\n    background-color: #ff5e5e;\n}\n\n#next-button,\n#summary-button:not(.w-50) {\n    width: 100%;\n}\nbutton.w-50 {\n    width: 50%;\n}\n#make-guess-button,\n#guess-button {\n    background-color: #212121;\n}\n\n#guess-button:hover,\n#reset-button {\n    opacity: 1;\n}\n\n#play-again-button {\n    background-color: #43b581;\n}\n\n#next-button,\n#summary-button {\n    background-color: #f44336;\n}\n\n@media (max-width: 750px) {\n    #container-map {\n        --inactive-width: 25vw;\n\n        &.container-map--size-1 {\n            --active-width: 25vw;\n        }\n    }\n}\n\n@media (max-width: 450px) {\n    #container-map {\n        width: 100%;\n        opacity: 1;\n        height: auto;\n        left: 0;\n        bottom: 0;\n        display: flex;\n        flex-direction: column;\n        .container-map_controls {\n            display: none;\n        }\n        .container-map_notepad {\n            display: none;\n        }\n        #map {\n            display: none;\n        }\n        &.container-map--active #map {\n            display: block;\n        }\n\n        &.container-map--active .container-map_controls {\n            display: none;\n        }\n        &.container-map--active {\n            height: 40vh;\n        }\n        &.container-map--full {\n            position: absolute;\n            --width: 100%;\n            height: calc(100% - 64px);\n            bottom: 0;\n            margin: 0;\n            max-height: 100%;\n        }\n        .container-map_controls_guess {\n            z-index: 999;\n        }\n    }\n\n    #make-guess-button,\n    #next-button,\n    #reset-button,\n    #guess-button,\n    #summary-button {\n        border-radius: 0;\n        opacity: 1;\n        bottom: 0;\n        width: 100%;\n    }\n\n\n    #hide-map-button {\n        position: absolute;\n        top: 0;\n        right: 0;\n        z-index: 4;\n    }\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Maps.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Maps.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Maps.vue?vue&type=template&id=7eafb31a&scoped=true&\"\nimport script from \"./Maps.vue?vue&type=script&lang=js&\"\nexport * from \"./Maps.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Maps.vue?vue&type=style&index=0&id=7eafb31a&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7eafb31a\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\ninstallComponents(component, {VBtn,VIcon})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-dialog',{attrs:{\"value\":_vm.dialogMessage,\"max-width\":\"600\",\"persistent\":\"\",\"fullscreen\":_vm.$viewport.width < 450}},[_c('v-card',{attrs:{\"color\":\"#061422\"}},[_c('v-card-title',[_c('span',{staticClass:\"dialog-message__title\",attrs:{\"id\":\"card-title\"}},[_vm._v(_vm._s(_vm.dialogTitle))])]),_c('v-card-text',[_c('v-container',[_c('span',[_vm._v(_vm._s(_vm.dialogText))])])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <v-dialog\n        :value=\"dialogMessage\"\n        max-width=\"600\"\n        persistent\n        :fullscreen=\"$viewport.width < 450\"\n    >\n        <v-card color=\"#061422\">\n            <v-card-title>\n                <span\n                    id=\"card-title\"\n                    class=\"dialog-message__title\"\n                >{{\n                    dialogTitle\n                }}</span>\n            </v-card-title>\n            <v-card-text>\n                <v-container>\n                    <span>{{ dialogText }}</span>\n                </v-container>\n            </v-card-text>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\nexport default {\n    props: ['dialogMessage', 'dialogTitle', 'dialogText'],\n};\n</script>\n\n<style scoped>\nspan {\n    color: #888;\n}\n\n#card-title {\n    font-size: 16px;\n    font-weight: 500;\n    opacity: 0.9;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DialogMessage.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DialogMessage.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DialogMessage.vue?vue&type=template&id=d9759994&scoped=true&\"\nimport script from \"./DialogMessage.vue?vue&type=script&lang=js&\"\nexport * from \"./DialogMessage.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DialogMessage.vue?vue&type=style&index=0&id=d9759994&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d9759994\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCardText } from 'vuetify/lib/components/VCard';\nimport { VCardTitle } from 'vuetify/lib/components/VCard';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VDialog } from 'vuetify/lib/components/VDialog';\ninstallComponents(component, {VCard,VCardText,VCardTitle,VContainer,VDialog})\n","import bbox from '@turf/bbox';\nimport booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport * as turfModel from '@turf/helpers';\nimport randomPositionInPolygon from 'random-position-in-polygon';\nimport { AREA_MODE, GAME_MODE } from '../constants';\nimport {\n    getAreaCodeNameFromLatLng,\n    getMaxDistanceBbox,\n    isInGeoJSON\n} from '../utils';\n\nclass StreetViewService {\n    constructor(\n        settingsPanorama,\n        settingsGame,\n        placeGeoJson,\n        roundsPredefined\n    ) {\n        this.settingsPanorama = settingsPanorama;\n        this.settingsGame = settingsGame;\n        this.placeGeoJson = placeGeoJson;\n        this.roundsPredefined = roundsPredefined;\n        this.service = new google.maps.StreetViewService();\n        this.alreadyVisited = [];\n    }\n\n    async getStreetView(round, cptNotFoundLocation = 0) {\n        let radius, position, randomFeatureProperties;\n        if (this.roundsPredefined) {\n            radius = 50;\n            const positions = this.roundsPredefined[round - 1];\n            position = new google.maps.LatLng(positions[0], positions[1]);\n        } else {\n            let randomPos;\n            do{\n                randomPos = this.getRandomLatLng();\n            } while(this.alreadyVisited.includes(randomPos.position.toString()));\n\n            this.alreadyVisited.push(randomPos.position.toString());\n            \n            radius = randomPos.radius;\n            position = randomPos.position;\n            randomFeatureProperties = randomPos.properties;\n        }\n\n        return new Promise((resolve) => {\n            this.service.getPanorama(\n                {\n                    location: position,\n                    preference: 'nearest',\n                    radius,\n                    source: this.settingsPanorama.allPanorama\n                        ? 'default'\n                        : 'outdoor',\n                },\n                async (data, status) => {\n                    if (\n                        status !== google.maps.StreetViewStatus.OK ||\n                        !data ||\n                        !data.location ||\n                        !this._checkStreetView(data)\n                    ) {\n                        resolve(await this.getStreetView(round));\n                    } else {\n                        resolve(\n                            await this._getResponseStreetViewService(\n                                round,\n                                data,\n                                cptNotFoundLocation,\n                                randomFeatureProperties\n                            )\n                        );\n                    }\n                }\n            );\n        });\n    }\n\n    async _getResponseStreetViewService(\n        round,\n        data,\n        cptNotFoundLocation,\n        randomFeatureProperties\n    ) {\n        let isInGeoJSONResult, isVisibleDialog = false;\n        if (this.placeGeoJson != null) {\n            isInGeoJSONResult = isInGeoJSON(\n                turfModel.point([\n                    data.location.latLng.lng(),\n                    data.location.latLng.lat(),\n                ]),\n                this.placeGeoJson\n            );\n        }\n        if (isInGeoJSONResult === false && cptNotFoundLocation < 3) {\n            return this.getStreetView(round, cptNotFoundLocation + 1);\n        } else {\n            // If 3 times Street View does not find location in the polygon placeGeoJson print warning message\n            if (isInGeoJSONResult === false) {\n                isVisibleDialog = true;\n            }\n            let areaCode;\n            try{\n                areaCode = await this._getAreaCode(data);\n            }catch(err){\n                return this.getStreetView(round);\n            }\n            \n            return {\n                panorama: data,\n                roundInfo: randomFeatureProperties || null,\n                area: areaCode,\n                warning: isVisibleDialog,\n            };\n        }\n    }\n    \n\n    getRandomLatLng() {\n        if (this.placeGeoJson != null) {\n            let position,\n                radius,\n                properties = null;\n            if (this.placeGeoJson.type === 'FeatureCollection') {  \n                let randInt = Math.floor(\n                    Math.random() * this.placeGeoJson.features.length\n                );\n\n                const feature = this.placeGeoJson.features[randInt];\n                properties = feature.properties;\n                if (feature.geometry.type === 'Point') {\n                    position = feature.geometry.coordinates;\n                    radius = 50;\n                } else {\n                    radius = getMaxDistanceBbox(bbox(feature)) * 100;\n                    position = randomPositionInPolygon(feature);\n                }\n            } else {\n                radius = getMaxDistanceBbox(bbox(this.placeGeoJson)) * 100;\n                position = randomPositionInPolygon(this.placeGeoJson);\n            }\n\n            return {\n                radius,\n                position: new google.maps.LatLng(position[1], position[0]),\n                properties,\n            };\n        }\n\n        // Generate a random latitude and longitude\n        const lat = Math.random() * 170 - 85;\n        const lng = Math.random() * 360 - 180;\n\n        return {\n            radius: 100000,\n            position: new google.maps.LatLng(lat, lng),\n            properties: null,\n        };\n    }\n\n    _checkStreetView(data) {\n        return !(\n            this.settingsPanorama.optimiseStreetView && \n                (\n                    !/^\\xA9 (?:\\d+ )?Google$/.test(data.copyright) ||\n                    !data.imageDate ||\n                    data.links.length < 2 ||\n                    (Array.isArray(data.g) && data.g.length !== 0)\n                )\n        );\n    }\n\n    async _getAreaCode(data){\n        if (\n            [GAME_MODE.COUNTRY, GAME_MODE.CUSTOM_AREA].includes(\n                this.settingsGame.mode\n            )\n        ) {\n            if (\n                this.settingsGame.mode === GAME_MODE.COUNTRY ||\n                (this.settingsGame.areaParams &&\n                    this.settingsGame.areaParams.data.type ===\n                        AREA_MODE.NOMINATIM)\n            ) {\n                return getAreaCodeNameFromLatLng(\n                    data.location.latLng,\n                    this.settingsGame.areaParams &&\n                        this.settingsGame.areaParams.data\n                );\n            } else {\n                const area = this.settingsGame.areasJson.features.find(\n                    (feature) =>\n                        booleanPointInPolygon(\n                            [\n                                data.location.latLng.lng(),\n                                data.location.latLng.lat(),\n                            ],\n                            feature\n                        )\n                );\n\n                if (!area) {\n                    throw new Error('Area not found');\n                } else {\n                    const key = this.settingsGame.areaParams\n                        ? this.settingsGame.areaParams.data.pathKey\n                        : 'iso_a2';\n                    return area.properties[key];\n                }\n            }\n        }\n    }\n}\n\n\nexport default StreetViewService;\n","export default {\n    data() {\n        return {\n            canExit: false,\n        };\n    },\n    methods: {\n        beforeUnload(event) {\n            event.returnValue = this.$t('StreetView.confirmExit');\n        },\n    },\n    created() {\n        window.addEventListener('beforeunload', this.beforeUnload);\n    },\n    beforeRouteLeave(_to, _from, next) {\n        if (!this.canExit) {\n            const answer = window.confirm(this.$t('StreetView.confirmExit'));\n            if (answer) {\n                next();\n            } else {\n                next(false);\n            }\n        } else {\n            next();\n        }\n    },\n    beforeDestroy() {\n        window.removeEventListener('beforeunload', this.beforeUnload);\n    },\n};\n","<template>\n    <div id=\"game-page\">\n        <div id=\"street-view-container\">\n            <HeaderGame\n                ref=\"header\"\n                :distance=\"scoreHeader\"\n                :points=\"pointsHeader\"\n                :round=\"round\"\n                :room-name=\"roomName\"\n                :nb-round=\"nbRound\"\n                :remaining-time=\"remainingTime\"\n                :mode=\"mode\"\n            />\n\n            <div id=\"game-interface\">\n                <v-overlay :value=\"!isReady && multiplayer\" opacity=\"1\" />\n                <div id=\"street-view\" ref=\"streetView\" />\n\n\n                <div id=\"game-interface__overlay\">\n                    <v-tooltip top>\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn class=\"resetBtn\" rounded dark fab \n                                   v-bind=\"attrs\"\n                                   v-on=\"on\"\n                                   @click=\"resetLocation\" >\n                                <v-icon>mdi-crosshairs-gps</v-icon>\n                            </v-btn>\n                        </template>\n                        <span>{{ $t('Maps.reset') }}</span>\n                    </v-tooltip>\n                    <Maps\n                        ref=\"mapContainer\"\n                        :random-lat-lng=\"randomLatLng\"\n                        :random-feature-properties=\"randomFeatureProperties\"\n                        :room-name=\"roomName\"\n                        :player-number=\"playerNumber\"\n                        :player-name=\"playerName\"\n                        :is-ready=\"isReady\"\n                        :round=\"round\"\n                        :score=\"score\"\n                        :points=\"points\"\n                        :difficulty=\"difficultyData\"\n                        :time-limitation=\"timeLimitation\"\n                        :bbox=\"bbox\"\n                        :mode=\"mode\"\n                        :area=\"area\"\n                        :time-attack=\"timeAttack\"\n                        :nb-round=\"nbRound\"\n                        :countdown=\"countdown\"\n                        :score-mode=\"scoreMode\"\n                        :areasGeoJsonUrl=\"areaParams && areaParams.data.urlArea\"\n                        :pathKey=\"\n                            areaParams ? areaParams.data.pathKey : 'iso_a2'\n                        \"\n                        :mapDetails=\"mapDetails\"\n                        @resetLocation=\"resetLocation\"\n                        @calculateDistance=\"updateScore\"\n                        @showResult=\"showResult\"\n                        @goToNextRound=\"goToNextRound\"\n                        @finishGame=\"finishGame\"\n                    />\n                </div>\n            </div>\n        </div>\n        <v-overlay :value=\"overlay\" opacity=\"0.8\" z-index=\"1\" />\n        <DialogMessage\n            :dialog-message=\"dialogMessage\"\n            :dialog-title=\"dialogTitle\"\n            :dialog-text=\"dialogText\"\n        />\n        <div class=\"alert-container\">\n            <v-alert\n                v-if=\"isVisibleDialog\"\n                type=\"warning\"\n                dismissible\n                class=\"warning-alert\"\n            >\n                <b>{{ $t('StreetView.nearby.title') }}</b> :\n                {{ $t('StreetView.nearby.message') }}\n            </v-alert>\n            <v-alert\n                id=\"warningCountdown\"\n                v-model=\"isVisibleCountdownAlert\"\n                type=\"info\"\n                dismissible\n                transition=\"slide-x-transition\"\n                prominent\n                icon=\"mdi-clock-fast\"\n            >\n                {{ $tc('StreetView.countdownAlert', remainingTime) }}\n                <v-progress-linear\n                    :active=\"isVisibleCountdownAlert\"\n                    color=\"white\"\n                    v-model=\"countdownPercentage\"\n                    absolute\n                    bottom\n                ></v-progress-linear>\n            </v-alert>\n        </div>\n    </div>\n</template>\n\n<script>\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport HeaderGame from '@/components/HeaderGame';\nimport Maps from '@/components/Maps';\nimport DialogMessage from '@/components/DialogMessage';\n\n\nimport StreetViewService from '@/plugins/StreetViewService';\n\nimport {\n    getRandomArea,\n} from '../utils';\n\nimport { GAME_MODE, SCORE_MODE } from '../constants';\n\nimport { mapActions, mapGetters } from 'vuex';\n\nimport ConfirmExitMixin from '@/mixins/ConfirmExitMixin';\n\nexport default {\n    components: {\n        HeaderGame,\n        Maps,\n        DialogMessage,\n    },\n    mixins: [ConfirmExitMixin],\n    props: {\n        roomName: {\n            default: null,\n            type: String,\n        },\n        // https://developers.google.com/maps/documentation/javascript/reference/street-view-service#StreetViewSource\n        allPanorama: {\n            default: false,\n            type: Boolean,\n        },\n        optimiseStreetView: {\n            default: true,\n            type: Boolean,\n        },\n        playerNumber: {\n            default: null,\n            type: Number,\n        },\n        playerName: {\n            default: null,\n            type: String,\n        },\n        placeGeoJson: {\n            default: null,\n            type: Object,\n        },\n        multiplayer: {\n            default: false,\n            type: Boolean,\n        },\n        time: {\n            default: 0,\n            type: Number,\n        },\n        difficulty: {\n            default: 2000,\n            type: Number,\n        },\n        bboxObj: {\n            default: null,\n            type: Array,\n        },\n        roundsPredefined: {\n            default: null,\n            type: Array,\n        },\n        modeSelected: {\n            default: GAME_MODE.CLASSIC,\n            type: String,\n        },\n        panControl: {\n            default: true,\n            type: Boolean,\n        },\n        zoomControl: {\n            default: true,\n            type: Boolean,\n        },\n        moveControl: {\n            default: true,\n            type: Boolean,\n        },\n        timeAttackSelected: {\n            default: false,\n            type: Boolean,\n        },\n        countdown: {\n            default: 0,\n            type: Number,\n        },\n        scoreMode: {\n            default: SCORE_MODE.NORMAL,\n            type: String,\n        },\n        areaParams: {\n            type: Object,\n        },\n        mapDetails:{\n            type: Object,\n            required: false,\n            default: undefined\n        },\n        nbRoundSelected: {\n            type: Number,\n            required: false,\n            default: 5,\n        },\n    },\n    data() {\n        return {\n            area: null,\n            randomLatLng: null,\n            randomFeatureProperties: null,\n            score: 0,\n            scoreHeader: 0,\n            points: 0,\n            pointsHeader: 0,\n            round: 1,\n            timeLimitation: this.time,\n            mode: this.modeSelected,\n            timeAttack: this.timeAttackSelected,\n            nbRound: this.timeAttackSelected ? 10 : this.nbRoundSelected,\n            remainingTime: 0,\n            endTime: null,\n            hasTimerStarted: false,\n            hasLocationSelected: false,\n            overlay: false,\n            room: null,\n            isReady: false,\n            dialogMessage: this.multiplayer,\n            dialogTitle: this.$t('StreetView.waitForOtherPlayers'),\n            dialogText: '',\n            isVisibleDialog: false,\n            panorama: null,\n\n            difficultyData: this.difficulty,\n            bbox: this.bboxObj,\n            isVisibleCountdownAlert: false,\n            timeCountdown: 0,\n\n            streetViewService: null,\n        };\n    },\n    computed: {\n        ...mapGetters(['areasJson']),\n        countdownPercentage() {\n            return (this.remainingTime * 100) / this.timeCountdown;\n        }\n    },\n    async mounted() {\n        if (\n            (this.areaParams && this.areaParams.data.urlArea) ||\n            this.mode === GAME_MODE.COUNTRY\n        ) {\n            await this.loadAreas(\n                this.areaParams && this.areaParams.data.urlArea\n            );\n        }\n        await this.$gmapApiPromiseLazy();\n        this.panorama = new google.maps.StreetViewPanorama(\n            this.$refs.streetView\n        );\n  \n        if (!this.streetViewService) {\n            this.streetViewService = new StreetViewService(\n                { allPanorama: this.allPanorama, optimiseStreetView: this.optimiseStreetView },\n                { mode: this.mode, areaParams: this.areaParams, areasJson: this.areasJson },\n                this.placeGeoJson,\n                this.roundsPredefined\n            );\n        }\n\n        if (!this.multiplayer) {\n            await this.loadStreetView();\n            this.$refs.mapContainer.startNextRound();\n\n            if (this.timeLimitation != 0) {\n                if (!this.hasTimerStarted) {\n                    this.initTimer(this.timeLimitation);\n                    this.hasTimerStarted = true;\n                }\n            }\n        } else {\n            // Set a room name if it's null to detect when the user refresh the page\n            if (!this.roomName) {\n                this.exitGame();\n            }\n\n            this.room = firebase.database().ref(this.roomName);\n\n            if (this.playerNumber === 1) {\n                await this.loadStreetView();\n            }\n\n            this.room.child('active').set(true);\n            this.room.on('value', (snapshot) => {\n                // Check if the room is already removed\n                if (snapshot.hasChild('active')) {\n                    // Put the player into the current round node if the player is not put yet\n                    if (\n                        !snapshot\n                            .child('round' + this.round)\n                            .hasChild('player' + this.playerNumber)\n                    ) {\n                        this.room\n                            .child('round' + this.round)\n                            .child('player' + this.playerNumber)\n                            .set(0);\n\n                        // Other players load the streetview the first player loaded earlier\n                        if (this.playerNumber != 1) {\n                            let randomLat = snapshot\n                                .child(\n                                    'streetView/round' +\n                                        this.round +\n                                        '/latitude'\n                                )\n                                .val();\n                            let randomLng = snapshot\n                                .child(\n                                    'streetView/round' +\n                                        this.round +\n                                        '/longitude'\n                                )\n                                .val();\n                          \n                            this.area = snapshot\n                                .child(\n                                    'streetView/round' + this.round + '/area'\n                                )\n                                .val();\n                            this.isVisibleDialog = snapshot\n                                .child(\n                                    'streetView/round' + this.round + '/warning'\n                                )\n                                .val();\n                            this.randomFeatureProperties = snapshot\n                                .child(\n                                    'streetView/round' +\n                                        this.round +\n                                        '/roundInfo'\n                                )\n                                .val();\n                            this.randomLatLng = new google.maps.LatLng(\n                                randomLat,\n                                randomLng\n                            );\n                            this.resetLocation();\n                        }\n                    }\n\n                    // Enable guess button when every players are put into the current round's node\n                    if (\n                        snapshot.child('round' + this.round).numChildren() ===\n                            snapshot.child('size').val() &&\n                        !this.isReady\n                    ) {\n                        // Close the dialog when everyone is ready\n                        this.dialogMessage = false;\n                        this.dialogText = '';\n\n                        this.isReady = true;\n                        this.$refs.mapContainer.startNextRound();\n\n                        // Countdown timer starts\n                        this.timeLimitation = snapshot\n                            .child('timeLimitation')\n                            .val();\n\n                        if (this.timeLimitation != 0) {\n                            if (!this.hasTimerStarted) {\n                                this.initTimer(this.timeLimitation);\n                                this.hasTimerStarted = true;\n                            }\n                        }\n                    }\n\n                    // Delete the room when everyone finished the game\n                    if (\n                        snapshot.child('isGameDone').numChildren() ==\n                        snapshot.child('size').val()\n                    ) {\n                        this.room.child('active').remove();\n                        this.room.off();\n                        this.room.remove();\n                    }\n                } else {\n                    // Force the players to exit the game when 'Active' is removed\n                    this.exitGame();\n                }\n            });\n        }\n\n        this.$refs.header.startTimer();\n    },\n    beforeDestroy() {\n        if (document.querySelector('.widget-scene')) {\n            document\n                .querySelector('.widget-scene')\n                .removeEventListener('keydown', this.onUserEventPanoramaKey);\n\n            document\n                .querySelector('.widget-scene')\n                .removeEventListener(\n                    'mousedown',\n                    this.onUserEventPanoramaMouse\n                );\n        }\n        window.removeEventListener('beforeunload', this.beforeUnload);\n        if (this.room) {\n            // Remove the room when the player refreshes the window\n            // Remove the room when the player pressed the back button on browser\n            this.room.child('active').remove();\n            this.room.off();\n        }\n    },\n    methods: {\n        ...mapActions(['loadAreas']),\n        async loadStreetView() {\n            let {panorama, roundInfo, warning, area} = await this.streetViewService.getStreetView(this.round);\n            this.randomLatLng = panorama.location.latLng;\n            this.randomFeatureProperties = roundInfo;\n            this.area = area;\n            this.setPosition(panorama);\n\n            if (this.multiplayer) {\n                // Put the streetview's location into firebase\n                this.room\n                    .child('streetView/round' + this.round)\n                    .set({\n                        latitude: this.randomLatLng.lat(),\n                        longitude: this.randomLatLng.lng(),\n                        roundInfo: roundInfo,\n                        ...(area && {area}),\n                        warning,\n                 });\n            }\n        },\n        resetLocation() {\n            const service = new google.maps.StreetViewService();\n            service.getPanorama(\n                {\n                    location: this.randomLatLng,\n                    preference: 'nearest',\n                    radius: 50,\n                    source: this.allPanorama ? 'default' : 'outdoor',\n                },\n                this.setPosition\n            );\n        },\n        setPosition(data) {\n            this.panorama.setOptions({\n                addressControl: false,\n                fullscreenControl: false,\n                motionTracking: false,\n                motionTrackingControl: false,\n                showRoadLabels: false,\n                panControl: this.panControl,\n                zoomControl: this.zoomControl,\n                scrollwheel: this.zoomControl,\n                disableDoubleClickZoom: !this.zoomControl,\n                linksControl: this.moveControl,\n                clickToGo: this.moveControl,\n            });\n            // Remove google streetview link\n            if (document.querySelector('#street-view a[href^=\"https://maps\"]'))\n                document\n                    .querySelector('#street-view a[href^=\"https://maps\"]')\n                    .remove();\n            setTimeout(() => {\n                if (document.querySelector('.widget-scene')) {\n                    document\n                        .querySelector('.widget-scene')\n                        .addEventListener(\n                            'keydown',\n                            this.onUserEventPanoramaKey\n                        );\n\n                    document\n                        .querySelector('.widget-scene')\n                        .addEventListener(\n                            'mousedown',\n                            this.onUserEventPanoramaMouse\n                        );\n                    document\n                        .querySelector('.widget-scene')\n                        .addEventListener(\n                            'touchstart',\n                            this.onUserEventPanoramaMouse\n                        );\n                    document\n                        .querySelector('.widget-scene')\n                        .addEventListener(\n                            'pointerdown',\n                            this.onUserEventPanoramaMouse\n                        );\n                }\n            }, 50);\n\n            if(data && data.location)\n                this.panorama.setPano(data.location.pano);\n            this.panorama.setPov({\n                heading: 270,\n                pitch: 0,\n            });\n\n            this.panorama.setZoom(0);\n        },\n        initTimer(time, printAlert) {\n            const endDate = new Date();\n            endDate.setSeconds(endDate.getSeconds() + time);\n            if (printAlert) {\n                this.timeCountdown = time;\n                this.isVisibleCountdownAlert = true;\n            }\n            if (this.hasTimerStarted) {\n                this.endTime = this.endTime > endDate ? endDate : this.endTime;\n            } else {\n                this.endTime = endDate;\n                this.startTimer();\n            }\n        },\n        startTimer(round = this.round) {\n            if (round === this.round) {\n                this.remainingTime = Math.max(\n                    0,\n                    Math.round((this.endTime - Date.now()) / 1000)\n                );\n                if (this.remainingTime > 0) {\n                    setTimeout(() => {\n                        this.startTimer(round);\n                    }, 1000);\n                } else {\n                    this.timerInProgress = false;\n                    if (!this.hasLocationSelected) {\n                        if (\n                            [GAME_MODE.COUNTRY, GAME_MODE.CUSTOM_AREA].includes(\n                                this.mode\n                            )\n                        ) {\n                            this.$refs.mapContainer.selectRandomLocation(\n                                getRandomArea(\n                                    this.areasJson,\n                                    this.areaParams\n                                        ? this.areaParams.data.pathKey\n                                        : 'iso_a2'\n                                )\n                            );\n                        } else {\n                            // Set a random location if the player didn't select a location in time\n                            this.$refs.mapContainer.selectRandomLocation(\n                                this.streetViewService.getRandomLatLng().position\n                            );\n                        }\n                    }\n                }\n            }\n        },\n        updateScore(distance, points) {\n            // Update the score and save it into firebase\n            this.hasLocationSelected = true;\n            if (!this.multiplayer) {\n                this.remainingTime = 0;\n            }\n            this.score += distance;\n            this.points += points;\n\n            if (this.multiplayer) {\n                this.room\n                    .child('finalScore/player' + this.playerNumber)\n                    .set(this.score);\n                this.room\n                    .child('finalPoints/player' + this.playerNumber)\n                    .set(this.points);\n\n                // Wait for other players to guess locations\n                this.dialogTitle = this.$t('StreetView.waitForOtherPlayers');\n                this.dialogMessage = true;\n            }\n        },\n        showResult() {\n            this.scoreHeader = this.score; // Update the score on header after every players guess locations\n            this.pointsHeader = this.points;\n            this.remainingTime = 0;\n            this.dialogMessage = false;\n            this.isVisibleCountdownAlert = false;\n            this.overlay = true;\n            this.$refs.header.stopTimer();\n        },\n        async goToNextRound(playAgain = false) {\n            if (playAgain) {\n                this.round = 0;\n                this.scoreHeader = 0;\n                this.pointsHeader = 0;\n                this.score = 0;\n                this.points = 0;\n            }\n\n            // Reset\n            this.randomLatLng = null;\n            this.area = null;\n            this.overlay = false;\n            this.hasTimerStarted = false;\n            this.hasLocationSelected = false;\n            this.isVisibleDialog = false;\n            this.randomFeatureProperties = null;\n\n            if (this.multiplayer) {\n                this.dialogMessage = true; // Show the dialog while waiting for other players\n                this.isReady = false; // Turn off the flag so the click event can be added in the next round\n            }\n\n            // Update the round\n            this.round += 1;\n\n            if (this.playerNumber == 1 || !this.multiplayer) {\n                await this.loadStreetView();\n                if (!this.multiplayer && this.timeLimitation != 0) {\n                    this.initTimer(this.timeLimitation);\n                }\n            } else {\n                // Trigger listener and load the next streetview\n                this.room\n                    .child('trigger/player' + this.playerNumber)\n                    .set(this.round);\n            }\n            this.$refs.mapContainer.startNextRound();\n        },\n        exitGame() {\n            // Disable the listener and force the players to exit the game\n            this.dialogTitle = this.$t('StreetView.redirectToHomePage');\n            this.dialogText = this.$t('StreetView.exitGame');\n            this.dialogMessage = true;\n            this.canExit = true;\n            if (this.room) {\n                this.room.off();\n                this.room.remove();\n                this.$router.push('/history');\n            } else {\n                this.$router.push('/');\n            }\n        },\n        finishGame() {\n            this.canExit = true;\n            if (!this.multiplayer) {\n                this.$router.push('/history');\n            } else {\n                // Open the dialog while waiting for other players to finsih the game\n                this.dialogTitle = this.$t(\n                    'StreetView.waitForOtherPlayersToFinish'\n                );\n                this.dialogText = '';\n                this.dialogMessage = true;\n            }\n        },\n        onUserEventPanoramaKey(e) {\n            if (\n                (!this.moveControl &&\n                    [38, 40, 87, 83, 90].includes(e.keyCode)) ||\n                (!this.zoomControl &&\n                    [107, 109, 187, 189].includes(e.keyCode)) ||\n                (!this.panControl &&\n                    [37, 39, 65, 68, 100, 102].includes(e.keyCode))\n            ) {\n                e.stopPropagation();\n            }\n        },\n        onUserEventPanoramaMouse(e) {\n            if (!this.panControl) e.stopPropagation();\n        },\n    },\n};\n</script>\n\n<style scoped lang=\"scss\">\n#game-page {\n    position: relative;\n    height: 100%;\n    height: var(--global-height, 100%);\n    width: 100%;\n    top: 0;\n    left: 0;\n}\n\n#street-view-container {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n}\n#game-interface {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n\n    &__overlay {\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        top: 0;\n        right: 0;\n        display: flex;\n        .resetBtn{\n            position: absolute;\n            bottom: 22px;\n            right: 70px;\n            z-index: 1;\n            @media (max-width: 450px) {\n                bottom: 65px;\n            }\n        }\n    }\n}\n\n#street-view {\n    position: relative;\n    min-height: 100%;\n    width: 100%;\n}\n.alert-container {\n    margin-top: 65px;\n    .v-alert {\n        z-index: 2;\n    }\n    #warningCountdown {\n        width: fit-content;\n        margin: 10px;\n        margin-top: 90px;\n        padding: auto 30px;\n    }\n}\n\n@media (max-width: 450px) {\n    #game-interface {\n        display: grid;\n        grid-template-rows: auto 44px;\n        #game-interface--overlay {\n            position: initial;\n        }\n    }\n\n    #reset-button {\n        bottom: 120px;\n    }\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreetView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreetView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./StreetView.vue?vue&type=template&id=d9d9e128&scoped=true&\"\nimport script from \"./StreetView.vue?vue&type=script&lang=js&\"\nexport * from \"./StreetView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./StreetView.vue?vue&type=style&index=0&id=d9d9e128&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d9d9e128\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAlert } from 'vuetify/lib/components/VAlert';\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VOverlay } from 'vuetify/lib/components/VOverlay';\nimport { VProgressLinear } from 'vuetify/lib/components/VProgressLinear';\nimport { VTooltip } from 'vuetify/lib/components/VTooltip';\ninstallComponents(component, {VAlert,VBtn,VIcon,VOverlay,VProgressLinear,VTooltip})\n"],"names":["meta_1","bbox","geojson","result","Infinity","coordEach","coord","exports","invariant_1","booleanPointInPolygon","point","polygon","options","Error","pt","getCoord","geom","getGeom","type","polys","coordinates","inBBox","insidePoly","i","length","inRing","ignoreBoundary","inHole","k","ring","isInside","slice","j","xi","yi","xj","yj","onBoundary","intersect","feature","properties","feat","id","geometry","_options","lineString","multiPoint","multiLineString","multiPolygon","Array","isArray","isNumber","points","featureCollection","map","coords","_i","coordinates_1","polygons","lineStrings","features","fc","geometryCollection","geometries","round","num","precision","multiplier","Math","pow","radiansToLength","radians","units","factor","factors","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","degrees","PI","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","areaFactors","finalFactor","isNaN","isObject","input","constructor","Object","validateBBox","forEach","validateId","indexOf","defineProperty","value","earthRadius","centimeters","centimetres","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","yards","unitsFactors","acres","hectares","helpers_1","getCoords","containsNumber","geojsonType","name","featureOf","collectionOf","_a","getType","_name","helpers","callback","excludeWrapCoord","l","stopG","geometryMaybeCollection","isGeometryCollection","wrapShrink","coordIndex","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","undefined","propEach","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","push","geomEach","g","featureProperties","featureBBox","featureId","geomReduce","currentGeometry","flattenEach","coordinate","flattenReduce","segmentEach","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint","randomPosition","coordInBBox","lon","lat","randomPoint","count","randomPolygon","num_vertices","max_radial_length","_loop_1","vertices","circleOffsets","apply","random","cur","index","arr","radialScaler","sin","cos","vertexToCoordinate","randomLineString","max_length","max_rotation","startingPoint","priorAngle","tan","hub","rnd","$","call","target","proto","enumerable","toJSON","URL","prototype","toString","this","randomPositionInPolygon","position","bboxObj","module","render","_vm","_h","$createElement","_c","_self","attrs","ref","scoreHeader","pointsHeader","roomName","nbRound","remainingTime","mode","isReady","multiplayer","scopedSlots","_u","key","fn","on","_g","_b","staticClass","resetLocation","_v","_s","$t","randomLatLng","randomFeatureProperties","playerNumber","playerName","score","difficultyData","timeLimitation","timeAttack","countdown","scoreMode","areaParams","data","urlArea","pathKey","mapDetails","updateScore","showResult","goToNextRound","finishGame","overlay","dialogMessage","dialogTitle","dialogText","_e","model","$$v","isVisibleCountdownAlert","expression","$tc","countdownPercentage","staticRenderFns","countdownText","timerText","streamerMode","Intl","NumberFormat","$i18n","locale","format","props","startedAt","intervalFunction","watch","computed","mapState","isDistanceVisible","methods","startTimer","stopTimer","clearInterval","component","VAppBar","class","$viewport","width","activeMap","pinActive","isMakeGuessButtonClicked","isNextButtonVisible","printMapFull","size","mouseover","mouseleave","showNotepad","$event","isGuessButtonClicked","hideMap","setSeletedPos","areasGeoJsonUrl","directives","rawName","isSummaryButtonVisible","selectedPos","room","selectLocation","style","backgroundColor","isNextButtonEnabled","dialogSummary","showMap","summaryTexts","game","domProps","showDistance","_l","text","finalPoints","finalScore","$emit","updateRecord","history","rank","localStorage","VBtn","title","description","link","validURL","url","VIcon","lng","fullscreenControl","mapTypeControl","streetViewControl","draggableCursor","clickableIcons","styles","$vuetify","theme","dark","themes","gmap","light","MapMixin","centerOnBbox","fitBounds","east","north","south","west","setZoom","setCenter","drawPolyline","removePolylines","mixins","marker","markers","polylines","strokeColors","mounted","putMarker","isRandomLocation","label","info","icon","anchor","removeMarkers","setInfoWindow","dataToDisplay","unit","content","infoWindow","selectedLatLng","path","strokeOpacity","scale","strokeColor","icons","offset","repeat","polyline","startNextRound","removeListener","google","bounds","polygonSelect","areaName","areaRandom","areaNameSelect","beige","green","large","showFlag","infoWindowDatas","flag","components","FlagIcon","default","areas","allowSelect","randomPos","mapGetters","getFeatureById","getProperty","fillOpacity","strokeWeight","c","p","fillColor","mapActions","pos","_distance","_points","_endGame","getScore","difficulty","time","SCORE_MODE","getScoreNormal","exp","DialogSummary","DetailsMap","Map","MapAreas","isSelected","isNextStreetViewReady","isNotepadVisible","countdownStarted","date","rounds","startTime","snapshot","child","guess","val","posGuess","childSnapshot","exportVal","players","roundValues","parseInt","setTimeout","set","getSelectedPos","selectRandomLocation","calculateDistance","timePassed","VCard","StreetViewService","settingsPanorama","settingsGame","placeGeoJson","roundsPredefined","service","maps","alreadyVisited","cptNotFoundLocation","radius","positions","LatLng","getRandomLatLng","includes","Promise","resolve","getPanorama","location","preference","source","allPanorama","status","StreetViewStatus","OK","_checkStreetView","getStreetView","_getResponseStreetViewService","isVisibleDialog","isInGeoJSONResult","isInGeoJSON","turfModel","latLng","_getAreaCode","areaCode","panorama","roundInfo","warning","randInt","floor","getMaxDistanceBbox","optimiseStreetView","test","copyright","imageDate","links","GAME_MODE","AREA_MODE","getAreaCodeNameFromLatLng","areasJson","find","canExit","beforeUnload","event","returnValue","created","window","addEventListener","beforeRouteLeave","_to","_from","next","answer","confirm","beforeDestroy","removeEventListener","HeaderGame","Maps","DialogMessage","modeSelected","panControl","zoomControl","moveControl","timeAttackSelected","required","nbRoundSelected","endTime","hasTimerStarted","hasLocationSelected","timeCountdown","streetViewService","hasChild","randomLat","randomLng","document","querySelector","loadStreetView","latitude","longitude","setPosition","addressControl","motionTracking","motionTrackingControl","showRoadLabels","scrollwheel","disableDoubleClickZoom","linksControl","clickToGo","remove","heading","pitch","initTimer","printAlert","endDate","getRandomArea","playAgain","exitGame","onUserEventPanoramaKey","e","onUserEventPanoramaMouse","VAlert"],"sourceRoot":""}